
STM32H750VBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  080074c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000184  24000020  080074dc  00020020  2**5
                  ALLOC
  7 ._user_heap_stack 00000604  240001a4  080074dc  000201a4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019192  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000029da  00000000  00000000  000391d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cb0  00000000  00000000  0003bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000bc8  00000000  00000000  0003c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003702c  00000000  00000000  0003d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010867  00000000  00000000  00074454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00165426  00000000  00000000  00084cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001ea0e1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034cc  00000000  00000000  001ea134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007460 	.word	0x08007460

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08007460 	.word	0x08007460

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002de:	2003      	movs	r0, #3
 80002e0:	f001 fd0c 	bl	8001cfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e4:	f004 ff9a 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80002e8:	4602      	mov	r2, r0
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_Init+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4913      	ldr	r1, [pc, #76]	; (8000344 <HAL_Init+0x6c>)
 80002f6:	5ccb      	ldrb	r3, [r1, r3]
 80002f8:	f003 031f 	and.w	r3, r3, #31
 80002fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_Init+0x6c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	f003 031f 	and.w	r3, r3, #31
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa22 f303 	lsr.w	r3, r2, r3
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <HAL_Init+0x70>)
 800031a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_Init+0x74>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000322:	200f      	movs	r0, #15
 8000324:	f000 f814 	bl	8000350 <HAL_InitTick>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800032e:	2301      	movs	r3, #1
 8000330:	e002      	b.n	8000338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000332:	f006 fe5f 	bl	8006ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	58024400 	.word	0x58024400
 8000344:	080074b0 	.word	0x080074b0
 8000348:	24000010 	.word	0x24000010
 800034c:	2400000c 	.word	0x2400000c

08000350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_InitTick+0x60>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	e021      	b.n	80003a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_InitTick+0x64>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_InitTick+0x60>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	fbb3 f3f1 	udiv	r3, r3, r1
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fcf1 	bl	8001d62 <HAL_SYSTICK_Config>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e00e      	b.n	80003a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0f      	cmp	r3, #15
 800038e:	d80a      	bhi.n	80003a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f001 fcbb 	bl	8001d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_InitTick+0x68>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e000      	b.n	80003a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	24000004 	.word	0x24000004
 80003b4:	2400000c 	.word	0x2400000c
 80003b8:	24000000 	.word	0x24000000

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	24000004 	.word	0x24000004
 80003e0:	2400004c 	.word	0x2400004c

080003e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return uwTick;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GetTick+0x14>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	2400004c 	.word	0x2400004c

080003fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000404:	f7ff ffee 	bl	80003e4 <HAL_GetTick>
 8000408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000414:	d005      	beq.n	8000422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_Delay+0x44>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4413      	add	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000422:	bf00      	nop
 8000424:	f7ff ffde 	bl	80003e4 <HAL_GetTick>
 8000428:	4602      	mov	r2, r0
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f7      	bhi.n	8000424 <HAL_Delay+0x28>
  {
  }
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	24000004 	.word	0x24000004

08000444 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <HAL_GetREVID+0x14>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	0c1b      	lsrs	r3, r3, #16
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	5c001000 	.word	0x5c001000

0800045c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	431a      	orrs	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	609a      	str	r2, [r3, #8]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	431a      	orrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	609a      	str	r2, [r3, #8]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3360      	adds	r3, #96	; 0x60
 80004d6:	461a      	mov	r2, r3
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	430b      	orrs	r3, r1
 80004f2:	431a      	orrs	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80004f8:	bf00      	nop
 80004fa:	371c      	adds	r7, #28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	f003 031f 	and.w	r3, r3, #31
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	431a      	orrs	r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	611a      	str	r2, [r3, #16]
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000536:	b480      	push	{r7}
 8000538:	b087      	sub	sp, #28
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3360      	adds	r3, #96	; 0x60
 8000546:	461a      	mov	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	431a      	orrs	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	601a      	str	r2, [r3, #0]
  }
}
 8000560:	bf00      	nop
 8000562:	371c      	adds	r7, #28
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800057c:	2b00      	cmp	r3, #0
 800057e:	d101      	bne.n	8000584 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000580:	2301      	movs	r3, #1
 8000582:	e000      	b.n	8000586 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000592:	b480      	push	{r7}
 8000594:	b087      	sub	sp, #28
 8000596:	af00      	add	r7, sp, #0
 8000598:	60f8      	str	r0, [r7, #12]
 800059a:	60b9      	str	r1, [r7, #8]
 800059c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3330      	adds	r3, #48	; 0x30
 80005a2:	461a      	mov	r2, r3
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	0a1b      	lsrs	r3, r3, #8
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	f003 030c 	and.w	r3, r3, #12
 80005ae:	4413      	add	r3, r2
 80005b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	f003 031f 	and.w	r3, r3, #31
 80005bc:	211f      	movs	r1, #31
 80005be:	fa01 f303 	lsl.w	r3, r1, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	401a      	ands	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	0e9b      	lsrs	r3, r3, #26
 80005ca:	f003 011f 	and.w	r1, r3, #31
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	f003 031f 	and.w	r3, r3, #31
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	431a      	orrs	r2, r3
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005de:	bf00      	nop
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b087      	sub	sp, #28
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3314      	adds	r3, #20
 80005fa:	461a      	mov	r2, r3
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	0e5b      	lsrs	r3, r3, #25
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	0d1b      	lsrs	r3, r3, #20
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	2107      	movs	r1, #7
 8000618:	fa01 f303 	lsl.w	r3, r1, r3
 800061c:	43db      	mvns	r3, r3
 800061e:	401a      	ands	r2, r3
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	0d1b      	lsrs	r3, r3, #20
 8000624:	f003 031f 	and.w	r3, r3, #31
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	431a      	orrs	r2, r3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000634:	bf00      	nop
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000658:	43db      	mvns	r3, r3
 800065a:	401a      	ands	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0318 	and.w	r3, r3, #24
 8000662:	4908      	ldr	r1, [pc, #32]	; (8000684 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000664:	40d9      	lsrs	r1, r3
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	400b      	ands	r3, r1
 800066a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800066e:	431a      	orrs	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	000fffff 	.word	0x000fffff

08000688 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 031f 	and.w	r3, r3, #31
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	6093      	str	r3, [r2, #8]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	5fffffc0 	.word	0x5fffffc0

080006c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006dc:	d101      	bne.n	80006e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <LL_ADC_EnableInternalRegulator+0x24>)
 80006fe:	4013      	ands	r3, r2
 8000700:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	6fffffc0 	.word	0x6fffffc0

08000718 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800072c:	d101      	bne.n	8000732 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <LL_ADC_Enable+0x24>)
 800074e:	4013      	ands	r3, r2
 8000750:	f043 0201 	orr.w	r2, r3, #1
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	7fffffc0 	.word	0x7fffffc0

08000768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b01      	cmp	r3, #1
 800077a:	d101      	bne.n	8000780 <LL_ADC_IsEnabled+0x18>
 800077c:	2301      	movs	r3, #1
 800077e:	e000      	b.n	8000782 <LL_ADC_IsEnabled+0x1a>
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689a      	ldr	r2, [r3, #8]
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <LL_ADC_REG_StartConversion+0x24>)
 800079e:	4013      	ands	r3, r2
 80007a0:	f043 0204 	orr.w	r2, r3, #4
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	7fffffc0 	.word	0x7fffffc0

080007b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d101      	bne.n	80007d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80007cc:	2301      	movs	r3, #1
 80007ce:	e000      	b.n	80007d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	2b08      	cmp	r3, #8
 80007f0:	d101      	bne.n	80007f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80007f2:	2301      	movs	r3, #1
 80007f4:	e000      	b.n	80007f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e18e      	b.n	8000b3c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000828:	2b00      	cmp	r3, #0
 800082a:	d109      	bne.n	8000840 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f006 fbfb 	bl	8007028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff3f 	bl	80006c8 <LL_ADC_IsDeepPowerDownEnabled>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff25 	bl	80006a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff5a 	bl	8000718 <LL_ADC_IsInternalRegulatorEnabled>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d114      	bne.n	8000894 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff3e 	bl	80006f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000874:	4b9a      	ldr	r3, [pc, #616]	; (8000ae0 <HAL_ADC_Init+0x2dc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	099b      	lsrs	r3, r3, #6
 800087a:	4a9a      	ldr	r2, [pc, #616]	; (8000ae4 <HAL_ADC_Init+0x2e0>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	099b      	lsrs	r3, r3, #6
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000886:	e002      	b.n	800088e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3b01      	subs	r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f9      	bne.n	8000888 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff3d 	bl	8000718 <LL_ADC_IsInternalRegulatorEnabled>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10d      	bne.n	80008c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008a8:	f043 0210 	orr.w	r2, r3, #16
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b4:	f043 0201 	orr.w	r2, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff77 	bl	80007b8 <LL_ADC_REG_IsConversionOngoing>
 80008ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f040 8128 	bne.w	8000b2a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f040 8124 	bne.w	8000b2a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80008ea:	f043 0202 	orr.w	r2, r3, #2
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff36 	bl	8000768 <LL_ADC_IsEnabled>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d136      	bne.n	8000970 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a78      	ldr	r2, [pc, #480]	; (8000ae8 <HAL_ADC_Init+0x2e4>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d004      	beq.n	8000916 <HAL_ADC_Init+0x112>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a76      	ldr	r2, [pc, #472]	; (8000aec <HAL_ADC_Init+0x2e8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10e      	bne.n	8000934 <HAL_ADC_Init+0x130>
 8000916:	4874      	ldr	r0, [pc, #464]	; (8000ae8 <HAL_ADC_Init+0x2e4>)
 8000918:	f7ff ff26 	bl	8000768 <LL_ADC_IsEnabled>
 800091c:	4604      	mov	r4, r0
 800091e:	4873      	ldr	r0, [pc, #460]	; (8000aec <HAL_ADC_Init+0x2e8>)
 8000920:	f7ff ff22 	bl	8000768 <LL_ADC_IsEnabled>
 8000924:	4603      	mov	r3, r0
 8000926:	4323      	orrs	r3, r4
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf0c      	ite	eq
 800092c:	2301      	moveq	r3, #1
 800092e:	2300      	movne	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	e008      	b.n	8000946 <HAL_ADC_Init+0x142>
 8000934:	486e      	ldr	r0, [pc, #440]	; (8000af0 <HAL_ADC_Init+0x2ec>)
 8000936:	f7ff ff17 	bl	8000768 <LL_ADC_IsEnabled>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf0c      	ite	eq
 8000940:	2301      	moveq	r3, #1
 8000942:	2300      	movne	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d012      	beq.n	8000970 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a66      	ldr	r2, [pc, #408]	; (8000ae8 <HAL_ADC_Init+0x2e4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d004      	beq.n	800095e <HAL_ADC_Init+0x15a>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a64      	ldr	r2, [pc, #400]	; (8000aec <HAL_ADC_Init+0x2e8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_ADC_Init+0x15e>
 800095e:	4a65      	ldr	r2, [pc, #404]	; (8000af4 <HAL_ADC_Init+0x2f0>)
 8000960:	e000      	b.n	8000964 <HAL_ADC_Init+0x160>
 8000962:	4a65      	ldr	r2, [pc, #404]	; (8000af8 <HAL_ADC_Init+0x2f4>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4619      	mov	r1, r3
 800096a:	4610      	mov	r0, r2
 800096c:	f7ff fd76 	bl	800045c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000970:	f7ff fd68 	bl	8000444 <HAL_GetREVID>
 8000974:	4603      	mov	r3, r0
 8000976:	f241 0203 	movw	r2, #4099	; 0x1003
 800097a:	4293      	cmp	r3, r2
 800097c:	d914      	bls.n	80009a8 <HAL_ADC_Init+0x1a4>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b10      	cmp	r3, #16
 8000984:	d110      	bne.n	80009a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7d5b      	ldrb	r3, [r3, #21]
 800098a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000990:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000996:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7f1b      	ldrb	r3, [r3, #28]
 800099c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800099e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009a0:	f043 030c 	orr.w	r3, r3, #12
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	e00d      	b.n	80009c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7d5b      	ldrb	r3, [r3, #21]
 80009ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80009b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7f1b      	ldrb	r3, [r3, #28]
 80009be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009c0:	4313      	orrs	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7f1b      	ldrb	r3, [r3, #28]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d106      	bne.n	80009da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a1b      	ldr	r3, [r3, #32]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	045b      	lsls	r3, r3, #17
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d009      	beq.n	80009f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <HAL_ADC_Init+0x2f8>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	69b9      	ldr	r1, [r7, #24]
 8000a06:	430b      	orrs	r3, r1
 8000a08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fed2 	bl	80007b8 <LL_ADC_REG_IsConversionOngoing>
 8000a14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fedf 	bl	80007de <LL_ADC_INJ_IsConversionOngoing>
 8000a20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d14a      	bne.n	8000abe <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d147      	bne.n	8000abe <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7d1b      	ldrb	r3, [r3, #20]
 8000a32:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_ADC_Init+0x2fc>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	69b9      	ldr	r1, [r7, #24]
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d11b      	bne.n	8000a92 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	691a      	ldr	r2, [r3, #16]
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <HAL_ADC_Init+0x300>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000a6e:	3a01      	subs	r2, #1
 8000a70:	0411      	lsls	r1, r2, #16
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000a76:	4311      	orrs	r1, r2
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000a7c:	4311      	orrs	r1, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a82:	430a      	orrs	r2, r1
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0201 	orr.w	r2, r2, #1
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	e007      	b.n	8000aa2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0201 	bic.w	r2, r2, #1
 8000aa0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 fd7b 	bl	80015b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d120      	bne.n	8000b08 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f023 010f 	bic.w	r1, r3, #15
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ade:	e01b      	b.n	8000b18 <HAL_ADC_Init+0x314>
 8000ae0:	2400000c 	.word	0x2400000c
 8000ae4:	053e2d63 	.word	0x053e2d63
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	40022100 	.word	0x40022100
 8000af0:	58026000 	.word	0x58026000
 8000af4:	40022300 	.word	0x40022300
 8000af8:	58026300 	.word	0x58026300
 8000afc:	fff0c003 	.word	0xfff0c003
 8000b00:	ffffbffc 	.word	0xffffbffc
 8000b04:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 020f 	bic.w	r2, r2, #15
 8000b16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1c:	f023 0303 	bic.w	r3, r3, #3
 8000b20:	f043 0201 	orr.w	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	655a      	str	r2, [r3, #84]	; 0x54
 8000b28:	e007      	b.n	8000b3a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b2e:	f043 0210 	orr.w	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3724      	adds	r7, #36	; 0x24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}

08000b44 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a5c      	ldr	r2, [pc, #368]	; (8000cc4 <HAL_ADC_Start+0x180>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d004      	beq.n	8000b60 <HAL_ADC_Start+0x1c>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a5b      	ldr	r2, [pc, #364]	; (8000cc8 <HAL_ADC_Start+0x184>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d101      	bne.n	8000b64 <HAL_ADC_Start+0x20>
 8000b60:	4b5a      	ldr	r3, [pc, #360]	; (8000ccc <HAL_ADC_Start+0x188>)
 8000b62:	e000      	b.n	8000b66 <HAL_ADC_Start+0x22>
 8000b64:	4b5a      	ldr	r3, [pc, #360]	; (8000cd0 <HAL_ADC_Start+0x18c>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fd8e 	bl	8000688 <LL_ADC_GetMultimode>
 8000b6c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fe20 	bl	80007b8 <LL_ADC_REG_IsConversionOngoing>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 809a 	bne.w	8000cb4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Start+0x4a>
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	e095      	b.n	8000cba <HAL_ADC_Start+0x176>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2201      	movs	r2, #1
 8000b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 fbee 	bl	8001378 <ADC_Enable>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f040 8081 	bne.w	8000caa <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <HAL_ADC_Start+0x190>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <HAL_ADC_Start+0x184>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d002      	beq.n	8000bc8 <HAL_ADC_Start+0x84>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	e000      	b.n	8000bca <HAL_ADC_Start+0x86>
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_ADC_Start+0x180>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d002      	beq.n	8000bd8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d105      	bne.n	8000be4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bf0:	d106      	bne.n	8000c00 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f023 0206 	bic.w	r2, r3, #6
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	659a      	str	r2, [r3, #88]	; 0x58
 8000bfe:	e002      	b.n	8000c06 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	221c      	movs	r2, #28
 8000c0c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <HAL_ADC_Start+0x184>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d002      	beq.n	8000c26 <HAL_ADC_Start+0xe2>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	e000      	b.n	8000c28 <HAL_ADC_Start+0xe4>
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_ADC_Start+0x180>)
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d008      	beq.n	8000c42 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	d002      	beq.n	8000c42 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b09      	cmp	r3, #9
 8000c40:	d114      	bne.n	8000c6c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d007      	beq.n	8000c60 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd93 	bl	8000790 <LL_ADC_REG_StartConversion>
 8000c6a:	e025      	b.n	8000cb8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <HAL_ADC_Start+0x184>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d002      	beq.n	8000c88 <HAL_ADC_Start+0x144>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	e000      	b.n	8000c8a <HAL_ADC_Start+0x146>
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_ADC_Start+0x180>)
 8000c8a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00f      	beq.n	8000cb8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	655a      	str	r2, [r3, #84]	; 0x54
 8000ca8:	e006      	b.n	8000cb8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000cb2:	e001      	b.n	8000cb8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	40022100 	.word	0x40022100
 8000ccc:	40022300 	.word	0x40022300
 8000cd0:	58026300 	.word	0x58026300
 8000cd4:	fffff0fe 	.word	0xfffff0fe

08000cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b0a1      	sub	sp, #132	; 0x84
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	4a9d      	ldr	r2, [pc, #628]	; (8000f68 <HAL_ADC_ConfigChannel+0x290>)
 8000cf2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d101      	bne.n	8000d02 <HAL_ADC_ConfigChannel+0x2a>
 8000cfe:	2302      	movs	r3, #2
 8000d00:	e321      	b.n	8001346 <HAL_ADC_ConfigChannel+0x66e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd52 	bl	80007b8 <LL_ADC_REG_IsConversionOngoing>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8306 	bne.w	8001328 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d108      	bne.n	8000d3a <HAL_ADC_ConfigChannel+0x62>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0e9b      	lsrs	r3, r3, #26
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	2201      	movs	r2, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	e016      	b.n	8000d68 <HAL_ADC_ConfigChannel+0x90>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d4a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8000d52:	2320      	movs	r3, #32
 8000d54:	e003      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8000d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	2201      	movs	r2, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	69d1      	ldr	r1, [r2, #28]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	6812      	ldr	r2, [r2, #0]
 8000d72:	430b      	orrs	r3, r1
 8000d74:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	6859      	ldr	r1, [r3, #4]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	f7ff fc05 	bl	8000592 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fd13 	bl	80007b8 <LL_ADC_REG_IsConversionOngoing>
 8000d92:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fd20 	bl	80007de <LL_ADC_INJ_IsConversionOngoing>
 8000d9e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 80b3 	bne.w	8000f0e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 80af 	bne.w	8000f0e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f7ff fc14 	bl	80005ea <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000dc2:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <HAL_ADC_ConfigChannel+0x294>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dce:	d10b      	bne.n	8000de8 <HAL_ADC_ConfigChannel+0x110>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	e01d      	b.n	8000e24 <HAL_ADC_ConfigChannel+0x14c>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10b      	bne.n	8000e0e <HAL_ADC_ConfigChannel+0x136>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	e00a      	b.n	8000e24 <HAL_ADC_ConfigChannel+0x14c>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	695a      	ldr	r2, [r3, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d027      	beq.n	8000e7e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	6919      	ldr	r1, [r3, #16]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e3c:	f7ff fb42 	bl	80004c4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6919      	ldr	r1, [r3, #16]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	7e5b      	ldrb	r3, [r3, #25]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d102      	bne.n	8000e56 <HAL_ADC_ConfigChannel+0x17e>
 8000e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e54:	e000      	b.n	8000e58 <HAL_ADC_ConfigChannel+0x180>
 8000e56:	2300      	movs	r3, #0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f7ff fb6c 	bl	8000536 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	6919      	ldr	r1, [r3, #16]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	7e1b      	ldrb	r3, [r3, #24]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d102      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x19c>
 8000e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e72:	e000      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x19e>
 8000e74:	2300      	movs	r3, #0
 8000e76:	461a      	mov	r2, r3
 8000e78:	f7ff fb44 	bl	8000504 <LL_ADC_SetDataRightShift>
 8000e7c:	e047      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	069b      	lsls	r3, r3, #26
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d107      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ea0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ea8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	069b      	lsls	r3, r3, #26
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d107      	bne.n	8000ec6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ec4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	069b      	lsls	r3, r3, #26
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d107      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ee8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	069b      	lsls	r3, r3, #26
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d107      	bne.n	8000f0e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f0c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc28 	bl	8000768 <LL_ADC_IsEnabled>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 820d 	bne.w	800133a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f7ff fb87 	bl	8000640 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_ADC_ConfigChannel+0x290>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 8133 	bne.w	80011a4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d110      	bne.n	8000f70 <HAL_ADC_ConfigChannel+0x298>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0e9b      	lsrs	r3, r3, #26
 8000f54:	3301      	adds	r3, #1
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	2b09      	cmp	r3, #9
 8000f5c:	bf94      	ite	ls
 8000f5e:	2301      	movls	r3, #1
 8000f60:	2300      	movhi	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	e01e      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x2cc>
 8000f66:	bf00      	nop
 8000f68:	47ff0000 	.word	0x47ff0000
 8000f6c:	5c001000 	.word	0x5c001000
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8000f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	e003      	b.n	8000f94 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8000f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f8e:	fab3 f383 	clz	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	bf94      	ite	ls
 8000f9e:	2301      	movls	r3, #1
 8000fa0:	2300      	movhi	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d079      	beq.n	800109c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d107      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x2ec>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0e9b      	lsrs	r3, r3, #26
 8000fba:	3301      	adds	r3, #1
 8000fbc:	069b      	lsls	r3, r3, #26
 8000fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fc2:	e015      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x318>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8000fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fd4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8000fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	e003      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8000fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fe2:	fab3 f383 	clz	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	069b      	lsls	r3, r3, #26
 8000fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x338>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0e9b      	lsrs	r3, r3, #26
 8001002:	3301      	adds	r3, #1
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	e017      	b.n	8001040 <HAL_ADC_ConfigChannel+0x368>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800101e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001028:	2320      	movs	r3, #32
 800102a:	e003      	b.n	8001034 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800102c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3301      	adds	r3, #1
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2101      	movs	r1, #1
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	ea42 0103 	orr.w	r1, r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10a      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x38e>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0e9b      	lsrs	r3, r3, #26
 8001056:	3301      	adds	r3, #1
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	051b      	lsls	r3, r3, #20
 8001064:	e018      	b.n	8001098 <HAL_ADC_ConfigChannel+0x3c0>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800107e:	2320      	movs	r3, #32
 8001080:	e003      	b.n	800108a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001098:	430b      	orrs	r3, r1
 800109a:	e07e      	b.n	800119a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d107      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x3e0>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0e9b      	lsrs	r3, r3, #26
 80010ae:	3301      	adds	r3, #1
 80010b0:	069b      	lsls	r3, r3, #26
 80010b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010b6:	e015      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x40c>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80010d0:	2320      	movs	r3, #32
 80010d2:	e003      	b.n	80010dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	069b      	lsls	r3, r3, #26
 80010e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x42c>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0e9b      	lsrs	r3, r3, #26
 80010f6:	3301      	adds	r3, #1
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	e017      	b.n	8001134 <HAL_ADC_ConfigChannel+0x45c>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	61bb      	str	r3, [r7, #24]
  return result;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800111c:	2320      	movs	r3, #32
 800111e:	e003      	b.n	8001128 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	ea42 0103 	orr.w	r1, r2, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10d      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x488>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0e9b      	lsrs	r3, r3, #26
 800114a:	3301      	adds	r3, #1
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	3b1e      	subs	r3, #30
 8001158:	051b      	lsls	r3, r3, #20
 800115a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115e:	e01b      	b.n	8001198 <HAL_ADC_ConfigChannel+0x4c0>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	60fb      	str	r3, [r7, #12]
  return result;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001178:	2320      	movs	r3, #32
 800117a:	e003      	b.n	8001184 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	f003 021f 	and.w	r2, r3, #31
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	3b1e      	subs	r3, #30
 8001192:	051b      	lsls	r3, r3, #20
 8001194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001198:	430b      	orrs	r3, r1
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	6892      	ldr	r2, [r2, #8]
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fa23 	bl	80005ea <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f280 80c6 	bge.w	800133a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a67      	ldr	r2, [pc, #412]	; (8001350 <HAL_ADC_ConfigChannel+0x678>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x4ea>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_ADC_ConfigChannel+0x67c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x4ee>
 80011c2:	4b65      	ldr	r3, [pc, #404]	; (8001358 <HAL_ADC_ConfigChannel+0x680>)
 80011c4:	e000      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x4f0>
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <HAL_ADC_ConfigChannel+0x684>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f96d 	bl	80004a8 <LL_ADC_GetCommonPathInternalCh>
 80011ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a5e      	ldr	r2, [pc, #376]	; (8001350 <HAL_ADC_ConfigChannel+0x678>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d004      	beq.n	80011e4 <HAL_ADC_ConfigChannel+0x50c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a5d      	ldr	r2, [pc, #372]	; (8001354 <HAL_ADC_ConfigChannel+0x67c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10e      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x52a>
 80011e4:	485a      	ldr	r0, [pc, #360]	; (8001350 <HAL_ADC_ConfigChannel+0x678>)
 80011e6:	f7ff fabf 	bl	8000768 <LL_ADC_IsEnabled>
 80011ea:	4604      	mov	r4, r0
 80011ec:	4859      	ldr	r0, [pc, #356]	; (8001354 <HAL_ADC_ConfigChannel+0x67c>)
 80011ee:	f7ff fabb 	bl	8000768 <LL_ADC_IsEnabled>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4323      	orrs	r3, r4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	e008      	b.n	8001214 <HAL_ADC_ConfigChannel+0x53c>
 8001202:	4857      	ldr	r0, [pc, #348]	; (8001360 <HAL_ADC_ConfigChannel+0x688>)
 8001204:	f7ff fab0 	bl	8000768 <LL_ADC_IsEnabled>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d07d      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_ADC_ConfigChannel+0x68c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d130      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x5ac>
 8001222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d12b      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_ADC_ConfigChannel+0x688>)
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 8081 	bne.w	800133a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_ADC_ConfigChannel+0x678>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d004      	beq.n	800124c <HAL_ADC_ConfigChannel+0x574>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_ADC_ConfigChannel+0x67c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x578>
 800124c:	4a42      	ldr	r2, [pc, #264]	; (8001358 <HAL_ADC_ConfigChannel+0x680>)
 800124e:	e000      	b.n	8001252 <HAL_ADC_ConfigChannel+0x57a>
 8001250:	4a42      	ldr	r2, [pc, #264]	; (800135c <HAL_ADC_ConfigChannel+0x684>)
 8001252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff f911 	bl	8000482 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001260:	4b41      	ldr	r3, [pc, #260]	; (8001368 <HAL_ADC_ConfigChannel+0x690>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	099b      	lsrs	r3, r3, #6
 8001266:	4a41      	ldr	r2, [pc, #260]	; (800136c <HAL_ADC_ConfigChannel+0x694>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	099b      	lsrs	r3, r3, #6
 800126e:	3301      	adds	r3, #1
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001274:	e002      	b.n	800127c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3b01      	subs	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f9      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001282:	e05a      	b.n	800133a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a39      	ldr	r2, [pc, #228]	; (8001370 <HAL_ADC_ConfigChannel+0x698>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11e      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x5f4>
 800128e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d119      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a30      	ldr	r2, [pc, #192]	; (8001360 <HAL_ADC_ConfigChannel+0x688>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d14b      	bne.n	800133a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <HAL_ADC_ConfigChannel+0x678>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x5de>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a28      	ldr	r2, [pc, #160]	; (8001354 <HAL_ADC_ConfigChannel+0x67c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x5e2>
 80012b6:	4a28      	ldr	r2, [pc, #160]	; (8001358 <HAL_ADC_ConfigChannel+0x680>)
 80012b8:	e000      	b.n	80012bc <HAL_ADC_ConfigChannel+0x5e4>
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <HAL_ADC_ConfigChannel+0x684>)
 80012bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c2:	4619      	mov	r1, r3
 80012c4:	4610      	mov	r0, r2
 80012c6:	f7ff f8dc 	bl	8000482 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012ca:	e036      	b.n	800133a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <HAL_ADC_ConfigChannel+0x69c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d131      	bne.n	800133a <HAL_ADC_ConfigChannel+0x662>
 80012d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d12c      	bne.n	800133a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <HAL_ADC_ConfigChannel+0x688>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d127      	bne.n	800133a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <HAL_ADC_ConfigChannel+0x678>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d004      	beq.n	80012fe <HAL_ADC_ConfigChannel+0x626>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <HAL_ADC_ConfigChannel+0x67c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x62a>
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <HAL_ADC_ConfigChannel+0x680>)
 8001300:	e000      	b.n	8001304 <HAL_ADC_ConfigChannel+0x62c>
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <HAL_ADC_ConfigChannel+0x684>)
 8001304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f7ff f8b8 	bl	8000482 <LL_ADC_SetCommonPathInternalCh>
 8001312:	e012      	b.n	800133a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001318:	f043 0220 	orr.w	r2, r3, #32
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001326:	e008      	b.n	800133a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001342:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001346:	4618      	mov	r0, r3
 8001348:	3784      	adds	r7, #132	; 0x84
 800134a:	46bd      	mov	sp, r7
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000
 8001354:	40022100 	.word	0x40022100
 8001358:	40022300 	.word	0x40022300
 800135c:	58026300 	.word	0x58026300
 8001360:	58026000 	.word	0x58026000
 8001364:	cb840000 	.word	0xcb840000
 8001368:	2400000c 	.word	0x2400000c
 800136c:	053e2d63 	.word	0x053e2d63
 8001370:	c7520000 	.word	0xc7520000
 8001374:	cfb80000 	.word	0xcfb80000

08001378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f9ef 	bl	8000768 <LL_ADC_IsEnabled>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d16e      	bne.n	800146e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <ADC_Enable+0x100>)
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00d      	beq.n	80013ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f043 0210 	orr.w	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e05a      	b.n	8001470 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f9be 	bl	8000740 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80013c4:	f7ff f80e 	bl	80003e4 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2b      	ldr	r2, [pc, #172]	; (800147c <ADC_Enable+0x104>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d004      	beq.n	80013de <ADC_Enable+0x66>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <ADC_Enable+0x108>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <ADC_Enable+0x6a>
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <ADC_Enable+0x10c>)
 80013e0:	e000      	b.n	80013e4 <ADC_Enable+0x6c>
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <ADC_Enable+0x110>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f94f 	bl	8000688 <LL_ADC_GetMultimode>
 80013ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <ADC_Enable+0x108>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d002      	beq.n	80013fc <ADC_Enable+0x84>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	e000      	b.n	80013fe <ADC_Enable+0x86>
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <ADC_Enable+0x104>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	4293      	cmp	r3, r2
 8001404:	d02c      	beq.n	8001460 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d130      	bne.n	800146e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800140c:	e028      	b.n	8001460 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f9a8 	bl	8000768 <LL_ADC_IsEnabled>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d104      	bne.n	8001428 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f98c 	bl	8000740 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001428:	f7fe ffdc 	bl	80003e4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d914      	bls.n	8001460 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d00d      	beq.n	8001460 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	f043 0210 	orr.w	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e007      	b.n	8001470 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b01      	cmp	r3, #1
 800146c:	d1cf      	bne.n	800140e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	8000003f 	.word	0x8000003f
 800147c:	40022000 	.word	0x40022000
 8001480:	40022100 	.word	0x40022100
 8001484:	40022300 	.word	0x40022300
 8001488:	58026300 	.word	0x58026300

0800148c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001498:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d14b      	bne.n	800153e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d021      	beq.n	8001504 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f851 	bl	800056c <LL_ADC_REG_IsTriggerSourceSWStart>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d032      	beq.n	8001536 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d12b      	bne.n	8001536 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d11f      	bne.n	8001536 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
 8001502:	e018      	b.n	8001536 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d111      	bne.n	8001536 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f005 fb04 	bl	8006b44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800153c:	e00e      	b.n	800155c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f005 fb68 	bl	8006c20 <HAL_ADC_ErrorCallback>
}
 8001550:	e004      	b.n	800155c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001570:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f005 fb20 	bl	8006bb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f043 0204 	orr.w	r2, r3, #4
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f005 fb3a 	bl	8006c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <ADC_ConfigureBoostMode+0x1f4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d004      	beq.n	80015d0 <ADC_ConfigureBoostMode+0x1c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a78      	ldr	r2, [pc, #480]	; (80017ac <ADC_ConfigureBoostMode+0x1f8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d109      	bne.n	80015e4 <ADC_ConfigureBoostMode+0x30>
 80015d0:	4b77      	ldr	r3, [pc, #476]	; (80017b0 <ADC_ConfigureBoostMode+0x1fc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	e008      	b.n	80015f6 <ADC_ConfigureBoostMode+0x42>
 80015e4:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <ADC_ConfigureBoostMode+0x200>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01c      	beq.n	8001634 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80015fa:	f003 ff89 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 80015fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001608:	d010      	beq.n	800162c <ADC_ConfigureBoostMode+0x78>
 800160a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800160e:	d871      	bhi.n	80016f4 <ADC_ConfigureBoostMode+0x140>
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d002      	beq.n	800161c <ADC_ConfigureBoostMode+0x68>
 8001616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800161a:	d16b      	bne.n	80016f4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	60fb      	str	r3, [r7, #12]
        break;
 800162a:	e066      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	60fb      	str	r3, [r7, #12]
        break;
 8001632:	e062      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001634:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001638:	f003 ff9a 	bl	8005570 <HAL_RCCEx_GetPeriphCLKFreq>
 800163c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001646:	d051      	beq.n	80016ec <ADC_ConfigureBoostMode+0x138>
 8001648:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800164c:	d854      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 800164e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001652:	d047      	beq.n	80016e4 <ADC_ConfigureBoostMode+0x130>
 8001654:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001658:	d84e      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 800165a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800165e:	d03d      	beq.n	80016dc <ADC_ConfigureBoostMode+0x128>
 8001660:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001664:	d848      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 8001666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800166a:	d033      	beq.n	80016d4 <ADC_ConfigureBoostMode+0x120>
 800166c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001670:	d842      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 8001672:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001676:	d029      	beq.n	80016cc <ADC_ConfigureBoostMode+0x118>
 8001678:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800167c:	d83c      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 800167e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001682:	d01a      	beq.n	80016ba <ADC_ConfigureBoostMode+0x106>
 8001684:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001688:	d836      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 800168a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800168e:	d014      	beq.n	80016ba <ADC_ConfigureBoostMode+0x106>
 8001690:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001694:	d830      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 8001696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800169a:	d00e      	beq.n	80016ba <ADC_ConfigureBoostMode+0x106>
 800169c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016a0:	d82a      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 80016a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80016a6:	d008      	beq.n	80016ba <ADC_ConfigureBoostMode+0x106>
 80016a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80016ac:	d824      	bhi.n	80016f8 <ADC_ConfigureBoostMode+0x144>
 80016ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016b2:	d002      	beq.n	80016ba <ADC_ConfigureBoostMode+0x106>
 80016b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016b8:	d11e      	bne.n	80016f8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	60fb      	str	r3, [r7, #12]
        break;
 80016ca:	e016      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	60fb      	str	r3, [r7, #12]
        break;
 80016d2:	e012      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	60fb      	str	r3, [r7, #12]
        break;
 80016da:	e00e      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	60fb      	str	r3, [r7, #12]
        break;
 80016e2:	e00a      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	09db      	lsrs	r3, r3, #7
 80016e8:	60fb      	str	r3, [r7, #12]
        break;
 80016ea:	e006      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	60fb      	str	r3, [r7, #12]
        break;
 80016f2:	e002      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
        break;
 80016f4:	bf00      	nop
 80016f6:	e000      	b.n	80016fa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80016f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80016fa:	f7fe fea3 	bl	8000444 <HAL_GetREVID>
 80016fe:	4603      	mov	r3, r0
 8001700:	f241 0203 	movw	r2, #4099	; 0x1003
 8001704:	4293      	cmp	r3, r2
 8001706:	d815      	bhi.n	8001734 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a2b      	ldr	r2, [pc, #172]	; (80017b8 <ADC_ConfigureBoostMode+0x204>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d908      	bls.n	8001722 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800171e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001720:	e03e      	b.n	80017a0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001730:	609a      	str	r2, [r3, #8]
}
 8001732:	e035      	b.n	80017a0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <ADC_ConfigureBoostMode+0x208>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d808      	bhi.n	8001754 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001750:	609a      	str	r2, [r3, #8]
}
 8001752:	e025      	b.n	80017a0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <ADC_ConfigureBoostMode+0x20c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d80a      	bhi.n	8001772 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	e016      	b.n	80017a0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <ADC_ConfigureBoostMode+0x210>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d80a      	bhi.n	8001790 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178c:	609a      	str	r2, [r3, #8]
}
 800178e:	e007      	b.n	80017a0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800179e:	609a      	str	r2, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40022100 	.word	0x40022100
 80017b0:	40022300 	.word	0x40022300
 80017b4:	58026300 	.word	0x58026300
 80017b8:	01312d00 	.word	0x01312d00
 80017bc:	005f5e10 	.word	0x005f5e10
 80017c0:	00bebc20 	.word	0x00bebc20
 80017c4:	017d7840 	.word	0x017d7840

080017c8 <LL_ADC_IsEnabled>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <LL_ADC_IsEnabled+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_IsEnabled+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <LL_ADC_REG_StartConversion>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <LL_ADC_REG_StartConversion+0x24>)
 80017fe:	4013      	ands	r3, r2
 8001800:	f043 0204 	orr.w	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	7fffffc0 	.word	0x7fffffc0

08001818 <LL_ADC_REG_IsConversionOngoing>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b04      	cmp	r3, #4
 800182a:	d101      	bne.n	8001830 <LL_ADC_REG_IsConversionOngoing+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0a0      	sub	sp, #128	; 0x80
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ffe1 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800185c:	2302      	movs	r3, #2
 800185e:	e08a      	b.n	8001976 <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800186a:	2302      	movs	r3, #2
 800186c:	e083      	b.n	8001976 <HAL_ADCEx_MultiModeStart_DMA+0x136>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800187a:	2300      	movs	r3, #0
 800187c:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a3f      	ldr	r2, [pc, #252]	; (8001980 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d102      	bne.n	800188e <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8001888:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e001      	b.n	8001892 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10b      	bne.n	80018b0 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e062      	b.n	8001976 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fd61 	bl	8001378 <ADC_Enable>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 80018bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd55 	bl	8001378 <ADC_Enable>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80018d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d146      	bne.n	800196a <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a24      	ldr	r2, [pc, #144]	; (8001990 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8001900:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a23      	ldr	r2, [pc, #140]	; (8001994 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8001908:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8001920:	e000      	b.n	8001924 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8001924:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	221c      	movs	r2, #28
 800192c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0210 	orr.w	r2, r2, #16
 8001944:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800194a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800194c:	330c      	adds	r3, #12
 800194e:	4619      	mov	r1, r3
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f000 ff36 	bl	80027c4 <HAL_DMA_Start_IT>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff44 	bl	80017f0 <LL_ADC_REG_StartConversion>
 8001968:	e003      	b.n	8001972 <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8001972:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8001976:	4618      	mov	r0, r3
 8001978:	3780      	adds	r7, #128	; 0x80
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40022000 	.word	0x40022000
 8001984:	40022100 	.word	0x40022100
 8001988:	fffff0fe 	.word	0xfffff0fe
 800198c:	0800148d 	.word	0x0800148d
 8001990:	08001565 	.word	0x08001565
 8001994:	08001581 	.word	0x08001581
 8001998:	40022300 	.word	0x40022300
 800199c:	58026300 	.word	0x58026300

080019a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b09f      	sub	sp, #124	; 0x7c
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e0be      	b.n	8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d102      	bne.n	80019de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80019d8:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	e001      	b.n	80019e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e09d      	b.n	8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff08 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 8001a08:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff02 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d17f      	bne.n	8001b1a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d17c      	bne.n	8001b1a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a47      	ldr	r2, [pc, #284]	; (8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d004      	beq.n	8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001a34:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001a36:	e000      	b.n	8001a3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001a38:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001a3a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d039      	beq.n	8001ab8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a54:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d004      	beq.n	8001a6a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a38      	ldr	r2, [pc, #224]	; (8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10e      	bne.n	8001a88 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001a6a:	4836      	ldr	r0, [pc, #216]	; (8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001a6c:	f7ff feac 	bl	80017c8 <LL_ADC_IsEnabled>
 8001a70:	4604      	mov	r4, r0
 8001a72:	4835      	ldr	r0, [pc, #212]	; (8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001a74:	f7ff fea8 	bl	80017c8 <LL_ADC_IsEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e008      	b.n	8001a9a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001a88:	4832      	ldr	r0, [pc, #200]	; (8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001a8a:	f7ff fe9d 	bl	80017c8 <LL_ADC_IsEnabled>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d047      	beq.n	8001b2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	6811      	ldr	r1, [r2, #0]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6892      	ldr	r2, [r2, #8]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ab6:	e03a      	b.n	8001b2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d10e      	bne.n	8001af6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8001ad8:	481a      	ldr	r0, [pc, #104]	; (8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001ada:	f7ff fe75 	bl	80017c8 <LL_ADC_IsEnabled>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001ae2:	f7ff fe71 	bl	80017c8 <LL_ADC_IsEnabled>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4323      	orrs	r3, r4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf0c      	ite	eq
 8001aee:	2301      	moveq	r3, #1
 8001af0:	2300      	movne	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e008      	b.n	8001b08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001af6:	4817      	ldr	r0, [pc, #92]	; (8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001af8:	f7ff fe66 	bl	80017c8 <LL_ADC_IsEnabled>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d010      	beq.n	8001b2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b16:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b18:	e009      	b.n	8001b2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0220 	orr.w	r2, r3, #32
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001b2c:	e000      	b.n	8001b30 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	377c      	adds	r7, #124	; 0x7c
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40022100 	.word	0x40022100
 8001b4c:	40022300 	.word	0x40022300
 8001b50:	58026300 	.word	0x58026300
 8001b54:	58026000 	.word	0x58026000
 8001b58:	fffff0e0 	.word	0xfffff0e0

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <__NVIC_SetPriorityGrouping+0x40>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x40>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	05fa0000 	.word	0x05fa0000

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc8:	d301      	bcc.n	8001cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <SysTick_Config+0x40>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f7ff ff8e 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce8:	2207      	movs	r2, #7
 8001cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000e010 	.word	0xe000e010

08001cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff29 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff40 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff90 	bl	8001c50 <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5f 	bl	8001bfc <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff33 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffa4 	bl	8001cb8 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e014      	b.n	8001db6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d105      	bne.n	8001da2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f005 fa03 	bl	80071a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	795b      	ldrb	r3, [r3, #5]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_DAC_Start+0x16>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e040      	b.n	8001e56 <HAL_DAC_Start+0x98>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2201      	movs	r2, #1
 8001dee:	409a      	lsls	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d11d      	bne.n	8001e48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	e014      	b.n	8001e48 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2102      	movs	r1, #2
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0202 	orr.w	r2, r2, #2
 8001e46:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	3308      	adds	r3, #8
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e004      	b.n	8001e96 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3314      	adds	r3, #20
 8001e94:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	795b      	ldrb	r3, [r3, #5]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DAC_ConfigChannel+0x18>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e11d      	b.n	8002100 <HAL_DAC_ConfigChannel+0x254>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d174      	bne.n	8001fc2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fa84 	bl	80003e4 <HAL_GetTick>
 8001edc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d134      	bne.n	8001f4e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ee4:	e011      	b.n	8001f0a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ee6:	f7fe fa7d 	bl	80003e4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d90a      	bls.n	8001f0a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f043 0208 	orr.w	r2, r3, #8
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2203      	movs	r2, #3
 8001f04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0fa      	b.n	8002100 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f10:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_DAC_ConfigChannel+0x25c>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e6      	bne.n	8001ee6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7fe fa6f 	bl	80003fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	6992      	ldr	r2, [r2, #24]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
 8001f28:	e01e      	b.n	8001f68 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f2a:	f7fe fa5b 	bl	80003e4 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d90a      	bls.n	8001f4e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f043 0208 	orr.w	r2, r3, #8
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2203      	movs	r2, #3
 8001f48:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0d8      	b.n	8002100 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	dbe8      	blt.n	8001f2a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7fe fa4f 	bl	80003fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	6992      	ldr	r2, [r2, #24]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	ea02 0103 	and.w	r1, r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	21ff      	movs	r1, #255	; 0xff
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	ea02 0103 	and.w	r1, r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d11d      	bne.n	8002006 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	221f      	movs	r2, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2207      	movs	r2, #7
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4013      	ands	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e00f      	b.n	8002050 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d102      	bne.n	800203e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002038:	2301      	movs	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	e008      	b.n	8002050 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002046:	2301      	movs	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e001      	b.n	8002050 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4313      	orrs	r3, r2
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	400a      	ands	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4013      	ands	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	22c0      	movs	r2, #192	; 0xc0
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43da      	mvns	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	400a      	ands	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20008000 	.word	0x20008000

0800210c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7fe f966 	bl	80003e4 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e316      	b.n	8002752 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <HAL_DMA_Init+0x1b8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d04a      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_DMA_Init+0x1bc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d045      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a63      	ldr	r2, [pc, #396]	; (80022cc <HAL_DMA_Init+0x1c0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a62      	ldr	r2, [pc, #392]	; (80022d0 <HAL_DMA_Init+0x1c4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d03b      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a60      	ldr	r2, [pc, #384]	; (80022d4 <HAL_DMA_Init+0x1c8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d036      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5f      	ldr	r2, [pc, #380]	; (80022d8 <HAL_DMA_Init+0x1cc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <HAL_DMA_Init+0x1d0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02c      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5c      	ldr	r2, [pc, #368]	; (80022e0 <HAL_DMA_Init+0x1d4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d027      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5a      	ldr	r2, [pc, #360]	; (80022e4 <HAL_DMA_Init+0x1d8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a59      	ldr	r2, [pc, #356]	; (80022e8 <HAL_DMA_Init+0x1dc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d01d      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_DMA_Init+0x1e0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_DMA_Init+0x1e4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_DMA_Init+0x1e8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <HAL_DMA_Init+0x1ec>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a51      	ldr	r2, [pc, #324]	; (80022fc <HAL_DMA_Init+0x1f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_DMA_Init+0xb8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a50      	ldr	r2, [pc, #320]	; (8002300 <HAL_DMA_Init+0x1f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Init+0xbc>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_DMA_Init+0xbe>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 813b 	beq.w	8002446 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a37      	ldr	r2, [pc, #220]	; (80022c4 <HAL_DMA_Init+0x1b8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d04a      	beq.n	8002280 <HAL_DMA_Init+0x174>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_DMA_Init+0x1bc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d045      	beq.n	8002280 <HAL_DMA_Init+0x174>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a34      	ldr	r2, [pc, #208]	; (80022cc <HAL_DMA_Init+0x1c0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d040      	beq.n	8002280 <HAL_DMA_Init+0x174>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <HAL_DMA_Init+0x1c4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d03b      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a31      	ldr	r2, [pc, #196]	; (80022d4 <HAL_DMA_Init+0x1c8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d036      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_DMA_Init+0x1cc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d031      	beq.n	8002280 <HAL_DMA_Init+0x174>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2e      	ldr	r2, [pc, #184]	; (80022dc <HAL_DMA_Init+0x1d0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d02c      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_DMA_Init+0x1d4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d027      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <HAL_DMA_Init+0x1d8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d022      	beq.n	8002280 <HAL_DMA_Init+0x174>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_DMA_Init+0x1dc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d01d      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a28      	ldr	r2, [pc, #160]	; (80022ec <HAL_DMA_Init+0x1e0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d018      	beq.n	8002280 <HAL_DMA_Init+0x174>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_DMA_Init+0x1e4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d013      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_DMA_Init+0x1e8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00e      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <HAL_DMA_Init+0x1ec>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_DMA_Init+0x174>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_DMA_Init+0x1f0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_DMA_Init+0x174>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a21      	ldr	r2, [pc, #132]	; (8002300 <HAL_DMA_Init+0x1f4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d108      	bne.n	8002292 <HAL_DMA_Init+0x186>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e007      	b.n	80022a2 <HAL_DMA_Init+0x196>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022a2:	e02f      	b.n	8002304 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a4:	f7fe f89e 	bl	80003e4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d928      	bls.n	8002304 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e246      	b.n	8002752 <HAL_DMA_Init+0x646>
 80022c4:	40020010 	.word	0x40020010
 80022c8:	40020028 	.word	0x40020028
 80022cc:	40020040 	.word	0x40020040
 80022d0:	40020058 	.word	0x40020058
 80022d4:	40020070 	.word	0x40020070
 80022d8:	40020088 	.word	0x40020088
 80022dc:	400200a0 	.word	0x400200a0
 80022e0:	400200b8 	.word	0x400200b8
 80022e4:	40020410 	.word	0x40020410
 80022e8:	40020428 	.word	0x40020428
 80022ec:	40020440 	.word	0x40020440
 80022f0:	40020458 	.word	0x40020458
 80022f4:	40020470 	.word	0x40020470
 80022f8:	40020488 	.word	0x40020488
 80022fc:	400204a0 	.word	0x400204a0
 8002300:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1c8      	bne.n	80022a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_DMA_Init+0x420>)
 800231e:	4013      	ands	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800232a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002336:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002342:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	2b04      	cmp	r3, #4
 8002356:	d107      	bne.n	8002368 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4313      	orrs	r3, r2
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002368:	4b71      	ldr	r3, [pc, #452]	; (8002530 <HAL_DMA_Init+0x424>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b71      	ldr	r3, [pc, #452]	; (8002534 <HAL_DMA_Init+0x428>)
 800236e:	4013      	ands	r3, r2
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002374:	d328      	bcc.n	80023c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b28      	cmp	r3, #40	; 0x28
 800237c:	d903      	bls.n	8002386 <HAL_DMA_Init+0x27a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b2e      	cmp	r3, #46	; 0x2e
 8002384:	d917      	bls.n	80023b6 <HAL_DMA_Init+0x2aa>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b3e      	cmp	r3, #62	; 0x3e
 800238c:	d903      	bls.n	8002396 <HAL_DMA_Init+0x28a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b42      	cmp	r3, #66	; 0x42
 8002394:	d90f      	bls.n	80023b6 <HAL_DMA_Init+0x2aa>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b46      	cmp	r3, #70	; 0x46
 800239c:	d903      	bls.n	80023a6 <HAL_DMA_Init+0x29a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b48      	cmp	r3, #72	; 0x48
 80023a4:	d907      	bls.n	80023b6 <HAL_DMA_Init+0x2aa>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b4e      	cmp	r3, #78	; 0x4e
 80023ac:	d905      	bls.n	80023ba <HAL_DMA_Init+0x2ae>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b52      	cmp	r3, #82	; 0x52
 80023b4:	d801      	bhi.n	80023ba <HAL_DMA_Init+0x2ae>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_DMA_Init+0x2b0>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0307 	bic.w	r3, r3, #7
 80023de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d117      	bne.n	8002422 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f001 fdcf 	bl	8003fa8 <DMA_CheckFifoParam>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e197      	b.n	8002752 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f001 fd0a 	bl	8003e44 <DMA_CalcBaseAndBitshift>
 8002430:	4603      	mov	r3, r0
 8002432:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	223f      	movs	r2, #63	; 0x3f
 800243e:	409a      	lsls	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	e0cd      	b.n	80025e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3b      	ldr	r2, [pc, #236]	; (8002538 <HAL_DMA_Init+0x42c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <HAL_DMA_Init+0x38a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a39      	ldr	r2, [pc, #228]	; (800253c <HAL_DMA_Init+0x430>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01d      	beq.n	8002496 <HAL_DMA_Init+0x38a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a38      	ldr	r2, [pc, #224]	; (8002540 <HAL_DMA_Init+0x434>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d018      	beq.n	8002496 <HAL_DMA_Init+0x38a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a36      	ldr	r2, [pc, #216]	; (8002544 <HAL_DMA_Init+0x438>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_DMA_Init+0x38a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a35      	ldr	r2, [pc, #212]	; (8002548 <HAL_DMA_Init+0x43c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00e      	beq.n	8002496 <HAL_DMA_Init+0x38a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a33      	ldr	r2, [pc, #204]	; (800254c <HAL_DMA_Init+0x440>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_DMA_Init+0x38a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a32      	ldr	r2, [pc, #200]	; (8002550 <HAL_DMA_Init+0x444>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <HAL_DMA_Init+0x38a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a30      	ldr	r2, [pc, #192]	; (8002554 <HAL_DMA_Init+0x448>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_DMA_Init+0x38e>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_DMA_Init+0x390>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8097 	beq.w	80025d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a24      	ldr	r2, [pc, #144]	; (8002538 <HAL_DMA_Init+0x42c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d021      	beq.n	80024f0 <HAL_DMA_Init+0x3e4>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_DMA_Init+0x430>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01c      	beq.n	80024f0 <HAL_DMA_Init+0x3e4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a21      	ldr	r2, [pc, #132]	; (8002540 <HAL_DMA_Init+0x434>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d017      	beq.n	80024f0 <HAL_DMA_Init+0x3e4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_DMA_Init+0x438>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d012      	beq.n	80024f0 <HAL_DMA_Init+0x3e4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_DMA_Init+0x43c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_DMA_Init+0x3e4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_DMA_Init+0x440>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d008      	beq.n	80024f0 <HAL_DMA_Init+0x3e4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <HAL_DMA_Init+0x444>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <HAL_DMA_Init+0x3e4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_DMA_Init+0x448>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_DMA_Init+0x44c>)
 800250e:	4013      	ands	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d020      	beq.n	800255c <HAL_DMA_Init+0x450>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	d102      	bne.n	8002528 <HAL_DMA_Init+0x41c>
 8002522:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002526:	e01a      	b.n	800255e <HAL_DMA_Init+0x452>
 8002528:	2300      	movs	r3, #0
 800252a:	e018      	b.n	800255e <HAL_DMA_Init+0x452>
 800252c:	fe10803f 	.word	0xfe10803f
 8002530:	5c001000 	.word	0x5c001000
 8002534:	ffff0000 	.word	0xffff0000
 8002538:	58025408 	.word	0x58025408
 800253c:	5802541c 	.word	0x5802541c
 8002540:	58025430 	.word	0x58025430
 8002544:	58025444 	.word	0x58025444
 8002548:	58025458 	.word	0x58025458
 800254c:	5802546c 	.word	0x5802546c
 8002550:	58025480 	.word	0x58025480
 8002554:	58025494 	.word	0x58025494
 8002558:	fffe000f 	.word	0xfffe000f
 800255c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68d2      	ldr	r2, [r2, #12]
 8002562:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800256c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002574:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800257c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800258c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b6e      	ldr	r3, [pc, #440]	; (800275c <HAL_DMA_Init+0x650>)
 80025a4:	4413      	add	r3, r2
 80025a6:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_DMA_Init+0x654>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	009a      	lsls	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 fc45 	bl	8003e44 <DMA_CalcBaseAndBitshift>
 80025ba:	4603      	mov	r3, r0
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2201      	movs	r2, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e008      	b.n	80025e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0b7      	b.n	8002752 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a5f      	ldr	r2, [pc, #380]	; (8002764 <HAL_DMA_Init+0x658>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d072      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a5d      	ldr	r2, [pc, #372]	; (8002768 <HAL_DMA_Init+0x65c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d06d      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5c      	ldr	r2, [pc, #368]	; (800276c <HAL_DMA_Init+0x660>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d068      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a5a      	ldr	r2, [pc, #360]	; (8002770 <HAL_DMA_Init+0x664>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d063      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a59      	ldr	r2, [pc, #356]	; (8002774 <HAL_DMA_Init+0x668>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d05e      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_DMA_Init+0x66c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d059      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a56      	ldr	r2, [pc, #344]	; (800277c <HAL_DMA_Init+0x670>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d054      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a54      	ldr	r2, [pc, #336]	; (8002780 <HAL_DMA_Init+0x674>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d04f      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a53      	ldr	r2, [pc, #332]	; (8002784 <HAL_DMA_Init+0x678>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d04a      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_DMA_Init+0x67c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d045      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a50      	ldr	r2, [pc, #320]	; (800278c <HAL_DMA_Init+0x680>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d040      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a4e      	ldr	r2, [pc, #312]	; (8002790 <HAL_DMA_Init+0x684>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d03b      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <HAL_DMA_Init+0x688>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d036      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <HAL_DMA_Init+0x68c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d031      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a4a      	ldr	r2, [pc, #296]	; (800279c <HAL_DMA_Init+0x690>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d02c      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_DMA_Init+0x694>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d027      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <HAL_DMA_Init+0x698>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a45      	ldr	r2, [pc, #276]	; (80027a8 <HAL_DMA_Init+0x69c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01d      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a44      	ldr	r2, [pc, #272]	; (80027ac <HAL_DMA_Init+0x6a0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d018      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a42      	ldr	r2, [pc, #264]	; (80027b0 <HAL_DMA_Init+0x6a4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a41      	ldr	r2, [pc, #260]	; (80027b4 <HAL_DMA_Init+0x6a8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00e      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3f      	ldr	r2, [pc, #252]	; (80027b8 <HAL_DMA_Init+0x6ac>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d009      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a3e      	ldr	r2, [pc, #248]	; (80027bc <HAL_DMA_Init+0x6b0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_DMA_Init+0x5c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <HAL_DMA_Init+0x6b4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_DMA_Init+0x5ca>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_DMA_Init+0x5cc>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f001 fcdf 	bl	80040a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d102      	bne.n	80026f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002704:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_DMA_Init+0x624>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b08      	cmp	r3, #8
 8002714:	d80c      	bhi.n	8002730 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f001 fd5c 	bl	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	e008      	b.n	8002742 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	a7fdabf8 	.word	0xa7fdabf8
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	40020010 	.word	0x40020010
 8002768:	40020028 	.word	0x40020028
 800276c:	40020040 	.word	0x40020040
 8002770:	40020058 	.word	0x40020058
 8002774:	40020070 	.word	0x40020070
 8002778:	40020088 	.word	0x40020088
 800277c:	400200a0 	.word	0x400200a0
 8002780:	400200b8 	.word	0x400200b8
 8002784:	40020410 	.word	0x40020410
 8002788:	40020428 	.word	0x40020428
 800278c:	40020440 	.word	0x40020440
 8002790:	40020458 	.word	0x40020458
 8002794:	40020470 	.word	0x40020470
 8002798:	40020488 	.word	0x40020488
 800279c:	400204a0 	.word	0x400204a0
 80027a0:	400204b8 	.word	0x400204b8
 80027a4:	58025408 	.word	0x58025408
 80027a8:	5802541c 	.word	0x5802541c
 80027ac:	58025430 	.word	0x58025430
 80027b0:	58025444 	.word	0x58025444
 80027b4:	58025458 	.word	0x58025458
 80027b8:	5802546c 	.word	0x5802546c
 80027bc:	58025480 	.word	0x58025480
 80027c0:	58025494 	.word	0x58025494

080027c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e226      	b.n	8002c2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_DMA_Start_IT+0x2a>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e21f      	b.n	8002c2e <HAL_DMA_Start_IT+0x46a>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	f040 820a 	bne.w	8002c18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a68      	ldr	r2, [pc, #416]	; (80029b8 <HAL_DMA_Start_IT+0x1f4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d04a      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_DMA_Start_IT+0x1f8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d045      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <HAL_DMA_Start_IT+0x1fc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d040      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <HAL_DMA_Start_IT+0x200>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d03b      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a62      	ldr	r2, [pc, #392]	; (80029c8 <HAL_DMA_Start_IT+0x204>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d036      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a60      	ldr	r2, [pc, #384]	; (80029cc <HAL_DMA_Start_IT+0x208>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a5f      	ldr	r2, [pc, #380]	; (80029d0 <HAL_DMA_Start_IT+0x20c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d02c      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5d      	ldr	r2, [pc, #372]	; (80029d4 <HAL_DMA_Start_IT+0x210>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d027      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5c      	ldr	r2, [pc, #368]	; (80029d8 <HAL_DMA_Start_IT+0x214>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5a      	ldr	r2, [pc, #360]	; (80029dc <HAL_DMA_Start_IT+0x218>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01d      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a59      	ldr	r2, [pc, #356]	; (80029e0 <HAL_DMA_Start_IT+0x21c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d018      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <HAL_DMA_Start_IT+0x220>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a56      	ldr	r2, [pc, #344]	; (80029e8 <HAL_DMA_Start_IT+0x224>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a54      	ldr	r2, [pc, #336]	; (80029ec <HAL_DMA_Start_IT+0x228>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a53      	ldr	r2, [pc, #332]	; (80029f0 <HAL_DMA_Start_IT+0x22c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_Start_IT+0xee>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_DMA_Start_IT+0x230>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <HAL_DMA_Start_IT+0x100>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e007      	b.n	80028d4 <HAL_DMA_Start_IT+0x110>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f001 f906 	bl	8003aec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <HAL_DMA_Start_IT+0x1f4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d04a      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a33      	ldr	r2, [pc, #204]	; (80029bc <HAL_DMA_Start_IT+0x1f8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d045      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_DMA_Start_IT+0x1fc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d040      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a30      	ldr	r2, [pc, #192]	; (80029c4 <HAL_DMA_Start_IT+0x200>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d03b      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2e      	ldr	r2, [pc, #184]	; (80029c8 <HAL_DMA_Start_IT+0x204>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d036      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <HAL_DMA_Start_IT+0x208>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d031      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_DMA_Start_IT+0x20c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02c      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_DMA_Start_IT+0x210>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d027      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <HAL_DMA_Start_IT+0x214>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_DMA_Start_IT+0x218>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d01d      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <HAL_DMA_Start_IT+0x21c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <HAL_DMA_Start_IT+0x220>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <HAL_DMA_Start_IT+0x224>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_DMA_Start_IT+0x228>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_DMA_Start_IT+0x22c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_DMA_Start_IT+0x1bc>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_DMA_Start_IT+0x230>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Start_IT+0x1c0>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_DMA_Start_IT+0x1c2>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d036      	beq.n	80029f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 021e 	bic.w	r2, r3, #30
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0216 	orr.w	r2, r2, #22
 800299c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d03e      	beq.n	8002a24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0208 	orr.w	r2, r2, #8
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e035      	b.n	8002a24 <HAL_DMA_Start_IT+0x260>
 80029b8:	40020010 	.word	0x40020010
 80029bc:	40020028 	.word	0x40020028
 80029c0:	40020040 	.word	0x40020040
 80029c4:	40020058 	.word	0x40020058
 80029c8:	40020070 	.word	0x40020070
 80029cc:	40020088 	.word	0x40020088
 80029d0:	400200a0 	.word	0x400200a0
 80029d4:	400200b8 	.word	0x400200b8
 80029d8:	40020410 	.word	0x40020410
 80029dc:	40020428 	.word	0x40020428
 80029e0:	40020440 	.word	0x40020440
 80029e4:	40020458 	.word	0x40020458
 80029e8:	40020470 	.word	0x40020470
 80029ec:	40020488 	.word	0x40020488
 80029f0:	400204a0 	.word	0x400204a0
 80029f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 020e 	bic.w	r2, r3, #14
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 020a 	orr.w	r2, r2, #10
 8002a0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0204 	orr.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a83      	ldr	r2, [pc, #524]	; (8002c38 <HAL_DMA_Start_IT+0x474>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d072      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a82      	ldr	r2, [pc, #520]	; (8002c3c <HAL_DMA_Start_IT+0x478>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d06d      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_DMA_Start_IT+0x47c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d068      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7f      	ldr	r2, [pc, #508]	; (8002c44 <HAL_DMA_Start_IT+0x480>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d063      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a7d      	ldr	r2, [pc, #500]	; (8002c48 <HAL_DMA_Start_IT+0x484>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d05e      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7c      	ldr	r2, [pc, #496]	; (8002c4c <HAL_DMA_Start_IT+0x488>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d059      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a7a      	ldr	r2, [pc, #488]	; (8002c50 <HAL_DMA_Start_IT+0x48c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d054      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <HAL_DMA_Start_IT+0x490>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d04f      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a77      	ldr	r2, [pc, #476]	; (8002c58 <HAL_DMA_Start_IT+0x494>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d04a      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a76      	ldr	r2, [pc, #472]	; (8002c5c <HAL_DMA_Start_IT+0x498>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d045      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a74      	ldr	r2, [pc, #464]	; (8002c60 <HAL_DMA_Start_IT+0x49c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d040      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a73      	ldr	r2, [pc, #460]	; (8002c64 <HAL_DMA_Start_IT+0x4a0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d03b      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a71      	ldr	r2, [pc, #452]	; (8002c68 <HAL_DMA_Start_IT+0x4a4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d036      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a70      	ldr	r2, [pc, #448]	; (8002c6c <HAL_DMA_Start_IT+0x4a8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d031      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_DMA_Start_IT+0x4ac>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02c      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6d      	ldr	r2, [pc, #436]	; (8002c74 <HAL_DMA_Start_IT+0x4b0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d027      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6b      	ldr	r2, [pc, #428]	; (8002c78 <HAL_DMA_Start_IT+0x4b4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d022      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_DMA_Start_IT+0x4b8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d01d      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a68      	ldr	r2, [pc, #416]	; (8002c80 <HAL_DMA_Start_IT+0x4bc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d018      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <HAL_DMA_Start_IT+0x4c0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d013      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_DMA_Start_IT+0x4c4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00e      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a64      	ldr	r2, [pc, #400]	; (8002c8c <HAL_DMA_Start_IT+0x4c8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d009      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a62      	ldr	r2, [pc, #392]	; (8002c90 <HAL_DMA_Start_IT+0x4cc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_DMA_Start_IT+0x350>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a61      	ldr	r2, [pc, #388]	; (8002c94 <HAL_DMA_Start_IT+0x4d0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_DMA_Start_IT+0x354>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_DMA_Start_IT+0x356>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01a      	beq.n	8002b54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <HAL_DMA_Start_IT+0x474>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d04a      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a36      	ldr	r2, [pc, #216]	; (8002c3c <HAL_DMA_Start_IT+0x478>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d045      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <HAL_DMA_Start_IT+0x47c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d040      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a33      	ldr	r2, [pc, #204]	; (8002c44 <HAL_DMA_Start_IT+0x480>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d03b      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <HAL_DMA_Start_IT+0x484>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d036      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a30      	ldr	r2, [pc, #192]	; (8002c4c <HAL_DMA_Start_IT+0x488>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d031      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <HAL_DMA_Start_IT+0x48c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d02c      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <HAL_DMA_Start_IT+0x490>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d027      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_DMA_Start_IT+0x494>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d022      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_DMA_Start_IT+0x498>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d01d      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_DMA_Start_IT+0x49c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d018      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_DMA_Start_IT+0x4a0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <HAL_DMA_Start_IT+0x4a4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_DMA_Start_IT+0x4a8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d009      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_DMA_Start_IT+0x4ac>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x430>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_DMA_Start_IT+0x4b0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <HAL_DMA_Start_IT+0x442>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e012      	b.n	8002c2c <HAL_DMA_Start_IT+0x468>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e009      	b.n	8002c2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40020010 	.word	0x40020010
 8002c3c:	40020028 	.word	0x40020028
 8002c40:	40020040 	.word	0x40020040
 8002c44:	40020058 	.word	0x40020058
 8002c48:	40020070 	.word	0x40020070
 8002c4c:	40020088 	.word	0x40020088
 8002c50:	400200a0 	.word	0x400200a0
 8002c54:	400200b8 	.word	0x400200b8
 8002c58:	40020410 	.word	0x40020410
 8002c5c:	40020428 	.word	0x40020428
 8002c60:	40020440 	.word	0x40020440
 8002c64:	40020458 	.word	0x40020458
 8002c68:	40020470 	.word	0x40020470
 8002c6c:	40020488 	.word	0x40020488
 8002c70:	400204a0 	.word	0x400204a0
 8002c74:	400204b8 	.word	0x400204b8
 8002c78:	58025408 	.word	0x58025408
 8002c7c:	5802541c 	.word	0x5802541c
 8002c80:	58025430 	.word	0x58025430
 8002c84:	58025444 	.word	0x58025444
 8002c88:	58025458 	.word	0x58025458
 8002c8c:	5802546c 	.word	0x5802546c
 8002c90:	58025480 	.word	0x58025480
 8002c94:	58025494 	.word	0x58025494

08002c98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ca4:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_DMA_IRQHandler+0x1ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <HAL_DMA_IRQHandler+0x1b0>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0a9b      	lsrs	r3, r3, #10
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5f      	ldr	r2, [pc, #380]	; (8002e4c <HAL_DMA_IRQHandler+0x1b4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04a      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5d      	ldr	r2, [pc, #372]	; (8002e50 <HAL_DMA_IRQHandler+0x1b8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d045      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <HAL_DMA_IRQHandler+0x1bc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d040      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_DMA_IRQHandler+0x1c0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d03b      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a59      	ldr	r2, [pc, #356]	; (8002e5c <HAL_DMA_IRQHandler+0x1c4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d036      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a57      	ldr	r2, [pc, #348]	; (8002e60 <HAL_DMA_IRQHandler+0x1c8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d031      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a56      	ldr	r2, [pc, #344]	; (8002e64 <HAL_DMA_IRQHandler+0x1cc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d02c      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a54      	ldr	r2, [pc, #336]	; (8002e68 <HAL_DMA_IRQHandler+0x1d0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d027      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a53      	ldr	r2, [pc, #332]	; (8002e6c <HAL_DMA_IRQHandler+0x1d4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d022      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a51      	ldr	r2, [pc, #324]	; (8002e70 <HAL_DMA_IRQHandler+0x1d8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01d      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a50      	ldr	r2, [pc, #320]	; (8002e74 <HAL_DMA_IRQHandler+0x1dc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d018      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a4e      	ldr	r2, [pc, #312]	; (8002e78 <HAL_DMA_IRQHandler+0x1e0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4d      	ldr	r2, [pc, #308]	; (8002e7c <HAL_DMA_IRQHandler+0x1e4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a4b      	ldr	r2, [pc, #300]	; (8002e80 <HAL_DMA_IRQHandler+0x1e8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4a      	ldr	r2, [pc, #296]	; (8002e84 <HAL_DMA_IRQHandler+0x1ec>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <HAL_DMA_IRQHandler+0x1f0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_DMA_IRQHandler+0xd6>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_DMA_IRQHandler+0xd8>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 842b 	beq.w	80035cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2208      	movs	r2, #8
 8002d80:	409a      	lsls	r2, r3
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80a2 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2e      	ldr	r2, [pc, #184]	; (8002e4c <HAL_DMA_IRQHandler+0x1b4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d04a      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <HAL_DMA_IRQHandler+0x1b8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d045      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <HAL_DMA_IRQHandler+0x1bc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d040      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <HAL_DMA_IRQHandler+0x1c0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d03b      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <HAL_DMA_IRQHandler+0x1c4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d036      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <HAL_DMA_IRQHandler+0x1c8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d031      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <HAL_DMA_IRQHandler+0x1cc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02c      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_DMA_IRQHandler+0x1d0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d027      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <HAL_DMA_IRQHandler+0x1d4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d022      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <HAL_DMA_IRQHandler+0x1d8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d01d      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_DMA_IRQHandler+0x1dc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d018      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_DMA_IRQHandler+0x1e0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_DMA_IRQHandler+0x1e4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_DMA_IRQHandler+0x1e8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_DMA_IRQHandler+0x1ec>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x194>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <HAL_DMA_IRQHandler+0x1f0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d12f      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x1f4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e02e      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x208>
 8002e42:	bf00      	nop
 8002e44:	2400000c 	.word	0x2400000c
 8002e48:	1b4e81b5 	.word	0x1b4e81b5
 8002e4c:	40020010 	.word	0x40020010
 8002e50:	40020028 	.word	0x40020028
 8002e54:	40020040 	.word	0x40020040
 8002e58:	40020058 	.word	0x40020058
 8002e5c:	40020070 	.word	0x40020070
 8002e60:	40020088 	.word	0x40020088
 8002e64:	400200a0 	.word	0x400200a0
 8002e68:	400200b8 	.word	0x400200b8
 8002e6c:	40020410 	.word	0x40020410
 8002e70:	40020428 	.word	0x40020428
 8002e74:	40020440 	.word	0x40020440
 8002e78:	40020458 	.word	0x40020458
 8002e7c:	40020470 	.word	0x40020470
 8002e80:	40020488 	.word	0x40020488
 8002e84:	400204a0 	.word	0x400204a0
 8002e88:	400204b8 	.word	0x400204b8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d06e      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a69      	ldr	r2, [pc, #420]	; (8003090 <HAL_DMA_IRQHandler+0x3f8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d04a      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_DMA_IRQHandler+0x3fc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d045      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a66      	ldr	r2, [pc, #408]	; (8003098 <HAL_DMA_IRQHandler+0x400>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d040      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a64      	ldr	r2, [pc, #400]	; (800309c <HAL_DMA_IRQHandler+0x404>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d03b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_DMA_IRQHandler+0x408>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d036      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <HAL_DMA_IRQHandler+0x40c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d031      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a60      	ldr	r2, [pc, #384]	; (80030a8 <HAL_DMA_IRQHandler+0x410>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d02c      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5e      	ldr	r2, [pc, #376]	; (80030ac <HAL_DMA_IRQHandler+0x414>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d027      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5d      	ldr	r2, [pc, #372]	; (80030b0 <HAL_DMA_IRQHandler+0x418>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d022      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5b      	ldr	r2, [pc, #364]	; (80030b4 <HAL_DMA_IRQHandler+0x41c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01d      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5a      	ldr	r2, [pc, #360]	; (80030b8 <HAL_DMA_IRQHandler+0x420>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d018      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a58      	ldr	r2, [pc, #352]	; (80030bc <HAL_DMA_IRQHandler+0x424>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_DMA_IRQHandler+0x428>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a55      	ldr	r2, [pc, #340]	; (80030c4 <HAL_DMA_IRQHandler+0x42c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a54      	ldr	r2, [pc, #336]	; (80030c8 <HAL_DMA_IRQHandler+0x430>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2ee>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_DMA_IRQHandler+0x434>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10a      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x304>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e003      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x30c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0202 	orr.w	r2, r3, #2
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	2204      	movs	r2, #4
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 808f 	beq.w	80030f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <HAL_DMA_IRQHandler+0x3f8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04a      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <HAL_DMA_IRQHandler+0x3fc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d045      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_DMA_IRQHandler+0x400>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d040      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_DMA_IRQHandler+0x404>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d03b      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <HAL_DMA_IRQHandler+0x408>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d036      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <HAL_DMA_IRQHandler+0x40c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d031      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <HAL_DMA_IRQHandler+0x410>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d02c      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a21      	ldr	r2, [pc, #132]	; (80030ac <HAL_DMA_IRQHandler+0x414>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d027      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <HAL_DMA_IRQHandler+0x418>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d022      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_DMA_IRQHandler+0x41c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01d      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_DMA_IRQHandler+0x420>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <HAL_DMA_IRQHandler+0x424>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1a      	ldr	r2, [pc, #104]	; (80030c0 <HAL_DMA_IRQHandler+0x428>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <HAL_DMA_IRQHandler+0x42c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <HAL_DMA_IRQHandler+0x430>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_DMA_IRQHandler+0x3e2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_DMA_IRQHandler+0x434>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d12a      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x438>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e023      	b.n	80030d8 <HAL_DMA_IRQHandler+0x440>
 8003090:	40020010 	.word	0x40020010
 8003094:	40020028 	.word	0x40020028
 8003098:	40020040 	.word	0x40020040
 800309c:	40020058 	.word	0x40020058
 80030a0:	40020070 	.word	0x40020070
 80030a4:	40020088 	.word	0x40020088
 80030a8:	400200a0 	.word	0x400200a0
 80030ac:	400200b8 	.word	0x400200b8
 80030b0:	40020410 	.word	0x40020410
 80030b4:	40020428 	.word	0x40020428
 80030b8:	40020440 	.word	0x40020440
 80030bc:	40020458 	.word	0x40020458
 80030c0:	40020470 	.word	0x40020470
 80030c4:	40020488 	.word	0x40020488
 80030c8:	400204a0 	.word	0x400204a0
 80030cc:	400204b8 	.word	0x400204b8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2204      	movs	r2, #4
 80030e6:	409a      	lsls	r2, r3
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2210      	movs	r2, #16
 8003102:	409a      	lsls	r2, r3
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a6 	beq.w	800325a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a85      	ldr	r2, [pc, #532]	; (8003328 <HAL_DMA_IRQHandler+0x690>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04a      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a83      	ldr	r2, [pc, #524]	; (800332c <HAL_DMA_IRQHandler+0x694>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d045      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a82      	ldr	r2, [pc, #520]	; (8003330 <HAL_DMA_IRQHandler+0x698>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d040      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a80      	ldr	r2, [pc, #512]	; (8003334 <HAL_DMA_IRQHandler+0x69c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d03b      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7f      	ldr	r2, [pc, #508]	; (8003338 <HAL_DMA_IRQHandler+0x6a0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d036      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7d      	ldr	r2, [pc, #500]	; (800333c <HAL_DMA_IRQHandler+0x6a4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <HAL_DMA_IRQHandler+0x6a8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d02c      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a7a      	ldr	r2, [pc, #488]	; (8003344 <HAL_DMA_IRQHandler+0x6ac>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d027      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a79      	ldr	r2, [pc, #484]	; (8003348 <HAL_DMA_IRQHandler+0x6b0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a77      	ldr	r2, [pc, #476]	; (800334c <HAL_DMA_IRQHandler+0x6b4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a76      	ldr	r2, [pc, #472]	; (8003350 <HAL_DMA_IRQHandler+0x6b8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a74      	ldr	r2, [pc, #464]	; (8003354 <HAL_DMA_IRQHandler+0x6bc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a73      	ldr	r2, [pc, #460]	; (8003358 <HAL_DMA_IRQHandler+0x6c0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a71      	ldr	r2, [pc, #452]	; (800335c <HAL_DMA_IRQHandler+0x6c4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a70      	ldr	r2, [pc, #448]	; (8003360 <HAL_DMA_IRQHandler+0x6c8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_DMA_IRQHandler+0x516>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6e      	ldr	r2, [pc, #440]	; (8003364 <HAL_DMA_IRQHandler+0x6cc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10a      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x52c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e009      	b.n	80031d8 <HAL_DMA_IRQHandler+0x540>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03e      	beq.n	800325a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	2210      	movs	r2, #16
 80031e6:	409a      	lsls	r2, r3
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d018      	beq.n	800322c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d108      	bne.n	800321a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d024      	beq.n	800325a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
 8003218:	e01f      	b.n	800325a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01b      	beq.n	800325a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
 800322a:	e016      	b.n	800325a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2220      	movs	r2, #32
 8003264:	409a      	lsls	r2, r3
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8110 	beq.w	8003490 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <HAL_DMA_IRQHandler+0x690>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d04a      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2b      	ldr	r2, [pc, #172]	; (800332c <HAL_DMA_IRQHandler+0x694>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d045      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a29      	ldr	r2, [pc, #164]	; (8003330 <HAL_DMA_IRQHandler+0x698>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d040      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a28      	ldr	r2, [pc, #160]	; (8003334 <HAL_DMA_IRQHandler+0x69c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d03b      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a26      	ldr	r2, [pc, #152]	; (8003338 <HAL_DMA_IRQHandler+0x6a0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d036      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a25      	ldr	r2, [pc, #148]	; (800333c <HAL_DMA_IRQHandler+0x6a4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d031      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a23      	ldr	r2, [pc, #140]	; (8003340 <HAL_DMA_IRQHandler+0x6a8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02c      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a22      	ldr	r2, [pc, #136]	; (8003344 <HAL_DMA_IRQHandler+0x6ac>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d027      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a20      	ldr	r2, [pc, #128]	; (8003348 <HAL_DMA_IRQHandler+0x6b0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d022      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1f      	ldr	r2, [pc, #124]	; (800334c <HAL_DMA_IRQHandler+0x6b4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d01d      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_DMA_IRQHandler+0x6b8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d018      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <HAL_DMA_IRQHandler+0x6bc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <HAL_DMA_IRQHandler+0x6c0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00e      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a19      	ldr	r2, [pc, #100]	; (800335c <HAL_DMA_IRQHandler+0x6c4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a17      	ldr	r2, [pc, #92]	; (8003360 <HAL_DMA_IRQHandler+0x6c8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_DMA_IRQHandler+0x678>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a16      	ldr	r2, [pc, #88]	; (8003364 <HAL_DMA_IRQHandler+0x6cc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d12b      	bne.n	8003368 <HAL_DMA_IRQHandler+0x6d0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e02a      	b.n	800337c <HAL_DMA_IRQHandler+0x6e4>
 8003326:	bf00      	nop
 8003328:	40020010 	.word	0x40020010
 800332c:	40020028 	.word	0x40020028
 8003330:	40020040 	.word	0x40020040
 8003334:	40020058 	.word	0x40020058
 8003338:	40020070 	.word	0x40020070
 800333c:	40020088 	.word	0x40020088
 8003340:	400200a0 	.word	0x400200a0
 8003344:	400200b8 	.word	0x400200b8
 8003348:	40020410 	.word	0x40020410
 800334c:	40020428 	.word	0x40020428
 8003350:	40020440 	.word	0x40020440
 8003354:	40020458 	.word	0x40020458
 8003358:	40020470 	.word	0x40020470
 800335c:	40020488 	.word	0x40020488
 8003360:	400204a0 	.word	0x400204a0
 8003364:	400204b8 	.word	0x400204b8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8087 	beq.w	8003490 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2220      	movs	r2, #32
 800338c:	409a      	lsls	r2, r3
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b04      	cmp	r3, #4
 800339c:	d139      	bne.n	8003412 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0216 	bic.w	r2, r2, #22
 80033ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_DMA_IRQHandler+0x736>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0208 	bic.w	r2, r2, #8
 80033dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	223f      	movs	r2, #63	; 0x3f
 80033e8:	409a      	lsls	r2, r3
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 834a 	beq.w	8003a9c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
          }
          return;
 8003410:	e344      	b.n	8003a9c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d018      	beq.n	8003452 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	2b00      	cmp	r3, #0
 8003434:	d02c      	beq.n	8003490 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
 800343e:	e027      	b.n	8003490 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d023      	beq.n	8003490 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e01e      	b.n	8003490 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10f      	bne.n	8003480 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0210 	bic.w	r2, r2, #16
 800346e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8306 	beq.w	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8088 	beq.w	80035b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2204      	movs	r2, #4
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a7a      	ldr	r2, [pc, #488]	; (80036a0 <HAL_DMA_IRQHandler+0xa08>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d04a      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a79      	ldr	r2, [pc, #484]	; (80036a4 <HAL_DMA_IRQHandler+0xa0c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d045      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a77      	ldr	r2, [pc, #476]	; (80036a8 <HAL_DMA_IRQHandler+0xa10>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d040      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a76      	ldr	r2, [pc, #472]	; (80036ac <HAL_DMA_IRQHandler+0xa14>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d03b      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a74      	ldr	r2, [pc, #464]	; (80036b0 <HAL_DMA_IRQHandler+0xa18>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d036      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a73      	ldr	r2, [pc, #460]	; (80036b4 <HAL_DMA_IRQHandler+0xa1c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d031      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a71      	ldr	r2, [pc, #452]	; (80036b8 <HAL_DMA_IRQHandler+0xa20>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d02c      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a70      	ldr	r2, [pc, #448]	; (80036bc <HAL_DMA_IRQHandler+0xa24>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d027      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a6e      	ldr	r2, [pc, #440]	; (80036c0 <HAL_DMA_IRQHandler+0xa28>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6d      	ldr	r2, [pc, #436]	; (80036c4 <HAL_DMA_IRQHandler+0xa2c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d01d      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6b      	ldr	r2, [pc, #428]	; (80036c8 <HAL_DMA_IRQHandler+0xa30>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <HAL_DMA_IRQHandler+0xa34>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a68      	ldr	r2, [pc, #416]	; (80036d0 <HAL_DMA_IRQHandler+0xa38>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a67      	ldr	r2, [pc, #412]	; (80036d4 <HAL_DMA_IRQHandler+0xa3c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_DMA_IRQHandler+0xa40>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_DMA_IRQHandler+0x8b8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a64      	ldr	r2, [pc, #400]	; (80036dc <HAL_DMA_IRQHandler+0xa44>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d108      	bne.n	8003562 <HAL_DMA_IRQHandler+0x8ca>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e007      	b.n	8003572 <HAL_DMA_IRQHandler+0x8da>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3301      	adds	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	429a      	cmp	r2, r3
 800357c:	d307      	bcc.n	800358e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f2      	bne.n	8003572 <HAL_DMA_IRQHandler+0x8da>
 800358c:	e000      	b.n	8003590 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800358e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2203      	movs	r2, #3
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80035ae:	e003      	b.n	80035b8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8272 	beq.w	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
 80035ca:	e26c      	b.n	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a43      	ldr	r2, [pc, #268]	; (80036e0 <HAL_DMA_IRQHandler+0xa48>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d022      	beq.n	800361c <HAL_DMA_IRQHandler+0x984>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a42      	ldr	r2, [pc, #264]	; (80036e4 <HAL_DMA_IRQHandler+0xa4c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d01d      	beq.n	800361c <HAL_DMA_IRQHandler+0x984>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a40      	ldr	r2, [pc, #256]	; (80036e8 <HAL_DMA_IRQHandler+0xa50>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d018      	beq.n	800361c <HAL_DMA_IRQHandler+0x984>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3f      	ldr	r2, [pc, #252]	; (80036ec <HAL_DMA_IRQHandler+0xa54>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d013      	beq.n	800361c <HAL_DMA_IRQHandler+0x984>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3d      	ldr	r2, [pc, #244]	; (80036f0 <HAL_DMA_IRQHandler+0xa58>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_DMA_IRQHandler+0x984>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3c      	ldr	r2, [pc, #240]	; (80036f4 <HAL_DMA_IRQHandler+0xa5c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d009      	beq.n	800361c <HAL_DMA_IRQHandler+0x984>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3a      	ldr	r2, [pc, #232]	; (80036f8 <HAL_DMA_IRQHandler+0xa60>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_DMA_IRQHandler+0x984>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a39      	ldr	r2, [pc, #228]	; (80036fc <HAL_DMA_IRQHandler+0xa64>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_DMA_IRQHandler+0x988>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_DMA_IRQHandler+0x98a>
 8003620:	2300      	movs	r3, #0
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 823f 	beq.w	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2204      	movs	r2, #4
 800363a:	409a      	lsls	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80cd 	beq.w	80037e0 <HAL_DMA_IRQHandler+0xb48>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80c7 	beq.w	80037e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2204      	movs	r2, #4
 800365c:	409a      	lsls	r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d049      	beq.n	8003700 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8210 	beq.w	8003aa0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003688:	e20a      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8206 	beq.w	8003aa0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369c:	e200      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xe08>
 800369e:	bf00      	nop
 80036a0:	40020010 	.word	0x40020010
 80036a4:	40020028 	.word	0x40020028
 80036a8:	40020040 	.word	0x40020040
 80036ac:	40020058 	.word	0x40020058
 80036b0:	40020070 	.word	0x40020070
 80036b4:	40020088 	.word	0x40020088
 80036b8:	400200a0 	.word	0x400200a0
 80036bc:	400200b8 	.word	0x400200b8
 80036c0:	40020410 	.word	0x40020410
 80036c4:	40020428 	.word	0x40020428
 80036c8:	40020440 	.word	0x40020440
 80036cc:	40020458 	.word	0x40020458
 80036d0:	40020470 	.word	0x40020470
 80036d4:	40020488 	.word	0x40020488
 80036d8:	400204a0 	.word	0x400204a0
 80036dc:	400204b8 	.word	0x400204b8
 80036e0:	58025408 	.word	0x58025408
 80036e4:	5802541c 	.word	0x5802541c
 80036e8:	58025430 	.word	0x58025430
 80036ec:	58025444 	.word	0x58025444
 80036f0:	58025458 	.word	0x58025458
 80036f4:	5802546c 	.word	0x5802546c
 80036f8:	58025480 	.word	0x58025480
 80036fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d160      	bne.n	80037cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a8c      	ldr	r2, [pc, #560]	; (8003940 <HAL_DMA_IRQHandler+0xca8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04a      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a8a      	ldr	r2, [pc, #552]	; (8003944 <HAL_DMA_IRQHandler+0xcac>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d045      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a89      	ldr	r2, [pc, #548]	; (8003948 <HAL_DMA_IRQHandler+0xcb0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d040      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a87      	ldr	r2, [pc, #540]	; (800394c <HAL_DMA_IRQHandler+0xcb4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d03b      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a86      	ldr	r2, [pc, #536]	; (8003950 <HAL_DMA_IRQHandler+0xcb8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d036      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a84      	ldr	r2, [pc, #528]	; (8003954 <HAL_DMA_IRQHandler+0xcbc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d031      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a83      	ldr	r2, [pc, #524]	; (8003958 <HAL_DMA_IRQHandler+0xcc0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d02c      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a81      	ldr	r2, [pc, #516]	; (800395c <HAL_DMA_IRQHandler+0xcc4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d027      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_DMA_IRQHandler+0xcc8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a7e      	ldr	r2, [pc, #504]	; (8003964 <HAL_DMA_IRQHandler+0xccc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01d      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7d      	ldr	r2, [pc, #500]	; (8003968 <HAL_DMA_IRQHandler+0xcd0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7b      	ldr	r2, [pc, #492]	; (800396c <HAL_DMA_IRQHandler+0xcd4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7a      	ldr	r2, [pc, #488]	; (8003970 <HAL_DMA_IRQHandler+0xcd8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a78      	ldr	r2, [pc, #480]	; (8003974 <HAL_DMA_IRQHandler+0xcdc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a77      	ldr	r2, [pc, #476]	; (8003978 <HAL_DMA_IRQHandler+0xce0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_DMA_IRQHandler+0xb12>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a75      	ldr	r2, [pc, #468]	; (800397c <HAL_DMA_IRQHandler+0xce4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <HAL_DMA_IRQHandler+0xb24>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0208 	bic.w	r2, r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e007      	b.n	80037cc <HAL_DMA_IRQHandler+0xb34>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0204 	bic.w	r2, r2, #4
 80037ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8165 	beq.w	8003aa0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037de:	e15f      	b.n	8003aa0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2202      	movs	r2, #2
 80037ea:	409a      	lsls	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80c5 	beq.w	8003980 <HAL_DMA_IRQHandler+0xce8>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80bf 	beq.w	8003980 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2202      	movs	r2, #2
 800380c:	409a      	lsls	r2, r3
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 813a 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003838:	e134      	b.n	8003aa4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8130 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384c:	e12a      	b.n	8003aa4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d168      	bne.n	800392a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a38      	ldr	r2, [pc, #224]	; (8003940 <HAL_DMA_IRQHandler+0xca8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d04a      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a37      	ldr	r2, [pc, #220]	; (8003944 <HAL_DMA_IRQHandler+0xcac>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d045      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a35      	ldr	r2, [pc, #212]	; (8003948 <HAL_DMA_IRQHandler+0xcb0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d040      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a34      	ldr	r2, [pc, #208]	; (800394c <HAL_DMA_IRQHandler+0xcb4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d03b      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a32      	ldr	r2, [pc, #200]	; (8003950 <HAL_DMA_IRQHandler+0xcb8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d036      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a31      	ldr	r2, [pc, #196]	; (8003954 <HAL_DMA_IRQHandler+0xcbc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d031      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <HAL_DMA_IRQHandler+0xcc0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02c      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2e      	ldr	r2, [pc, #184]	; (800395c <HAL_DMA_IRQHandler+0xcc4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d027      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <HAL_DMA_IRQHandler+0xcc8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2b      	ldr	r2, [pc, #172]	; (8003964 <HAL_DMA_IRQHandler+0xccc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d01d      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <HAL_DMA_IRQHandler+0xcd0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a28      	ldr	r2, [pc, #160]	; (800396c <HAL_DMA_IRQHandler+0xcd4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a26      	ldr	r2, [pc, #152]	; (8003970 <HAL_DMA_IRQHandler+0xcd8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a25      	ldr	r2, [pc, #148]	; (8003974 <HAL_DMA_IRQHandler+0xcdc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a23      	ldr	r2, [pc, #140]	; (8003978 <HAL_DMA_IRQHandler+0xce0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xc60>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a22      	ldr	r2, [pc, #136]	; (800397c <HAL_DMA_IRQHandler+0xce4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d108      	bne.n	800390a <HAL_DMA_IRQHandler+0xc72>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0214 	bic.w	r2, r2, #20
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e007      	b.n	800391a <HAL_DMA_IRQHandler+0xc82>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 020a 	bic.w	r2, r2, #10
 8003918:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80b8 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800393c:	e0b2      	b.n	8003aa4 <HAL_DMA_IRQHandler+0xe0c>
 800393e:	bf00      	nop
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2208      	movs	r2, #8
 800398a:	409a      	lsls	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8088 	beq.w	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8082 	beq.w	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a41      	ldr	r2, [pc, #260]	; (8003aac <HAL_DMA_IRQHandler+0xe14>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d04a      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3f      	ldr	r2, [pc, #252]	; (8003ab0 <HAL_DMA_IRQHandler+0xe18>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d045      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a3e      	ldr	r2, [pc, #248]	; (8003ab4 <HAL_DMA_IRQHandler+0xe1c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d040      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a3c      	ldr	r2, [pc, #240]	; (8003ab8 <HAL_DMA_IRQHandler+0xe20>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d03b      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a3b      	ldr	r2, [pc, #236]	; (8003abc <HAL_DMA_IRQHandler+0xe24>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d036      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a39      	ldr	r2, [pc, #228]	; (8003ac0 <HAL_DMA_IRQHandler+0xe28>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <HAL_DMA_IRQHandler+0xe2c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d02c      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a36      	ldr	r2, [pc, #216]	; (8003ac8 <HAL_DMA_IRQHandler+0xe30>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a35      	ldr	r2, [pc, #212]	; (8003acc <HAL_DMA_IRQHandler+0xe34>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <HAL_DMA_IRQHandler+0xe38>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01d      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a32      	ldr	r2, [pc, #200]	; (8003ad4 <HAL_DMA_IRQHandler+0xe3c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_DMA_IRQHandler+0xe40>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <HAL_DMA_IRQHandler+0xe44>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <HAL_DMA_IRQHandler+0xe48>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2c      	ldr	r2, [pc, #176]	; (8003ae4 <HAL_DMA_IRQHandler+0xe4c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdaa>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <HAL_DMA_IRQHandler+0xe50>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <HAL_DMA_IRQHandler+0xdbc>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 021c 	bic.w	r2, r2, #28
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_DMA_IRQHandler+0xdcc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 020e 	bic.w	r2, r2, #14
 8003a62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
 8003a9a:	e004      	b.n	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003a9c:	bf00      	nop
 8003a9e:	e002      	b.n	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003aa6:	3728      	adds	r7, #40	; 0x28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40020010 	.word	0x40020010
 8003ab0:	40020028 	.word	0x40020028
 8003ab4:	40020040 	.word	0x40020040
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	40020070 	.word	0x40020070
 8003ac0:	40020088 	.word	0x40020088
 8003ac4:	400200a0 	.word	0x400200a0
 8003ac8:	400200b8 	.word	0x400200b8
 8003acc:	40020410 	.word	0x40020410
 8003ad0:	40020428 	.word	0x40020428
 8003ad4:	40020440 	.word	0x40020440
 8003ad8:	40020458 	.word	0x40020458
 8003adc:	40020470 	.word	0x40020470
 8003ae0:	40020488 	.word	0x40020488
 8003ae4:	400204a0 	.word	0x400204a0
 8003ae8:	400204b8 	.word	0x400204b8

08003aec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a84      	ldr	r2, [pc, #528]	; (8003d1c <DMA_SetConfig+0x230>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d072      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a82      	ldr	r2, [pc, #520]	; (8003d20 <DMA_SetConfig+0x234>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d06d      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a81      	ldr	r2, [pc, #516]	; (8003d24 <DMA_SetConfig+0x238>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d068      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a7f      	ldr	r2, [pc, #508]	; (8003d28 <DMA_SetConfig+0x23c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d063      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7e      	ldr	r2, [pc, #504]	; (8003d2c <DMA_SetConfig+0x240>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d05e      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7c      	ldr	r2, [pc, #496]	; (8003d30 <DMA_SetConfig+0x244>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d059      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7b      	ldr	r2, [pc, #492]	; (8003d34 <DMA_SetConfig+0x248>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d054      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a79      	ldr	r2, [pc, #484]	; (8003d38 <DMA_SetConfig+0x24c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04f      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a78      	ldr	r2, [pc, #480]	; (8003d3c <DMA_SetConfig+0x250>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d04a      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a76      	ldr	r2, [pc, #472]	; (8003d40 <DMA_SetConfig+0x254>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d045      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a75      	ldr	r2, [pc, #468]	; (8003d44 <DMA_SetConfig+0x258>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d040      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a73      	ldr	r2, [pc, #460]	; (8003d48 <DMA_SetConfig+0x25c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a72      	ldr	r2, [pc, #456]	; (8003d4c <DMA_SetConfig+0x260>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d036      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a70      	ldr	r2, [pc, #448]	; (8003d50 <DMA_SetConfig+0x264>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6f      	ldr	r2, [pc, #444]	; (8003d54 <DMA_SetConfig+0x268>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d02c      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6d      	ldr	r2, [pc, #436]	; (8003d58 <DMA_SetConfig+0x26c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d027      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6c      	ldr	r2, [pc, #432]	; (8003d5c <DMA_SetConfig+0x270>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <DMA_SetConfig+0x274>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <DMA_SetConfig+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a67      	ldr	r2, [pc, #412]	; (8003d68 <DMA_SetConfig+0x27c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a66      	ldr	r2, [pc, #408]	; (8003d6c <DMA_SetConfig+0x280>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a64      	ldr	r2, [pc, #400]	; (8003d70 <DMA_SetConfig+0x284>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a63      	ldr	r2, [pc, #396]	; (8003d74 <DMA_SetConfig+0x288>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <DMA_SetConfig+0x28c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <DMA_SetConfig+0x10e>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <DMA_SetConfig+0x110>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c1a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3e      	ldr	r2, [pc, #248]	; (8003d1c <DMA_SetConfig+0x230>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d04a      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <DMA_SetConfig+0x234>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d045      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a3b      	ldr	r2, [pc, #236]	; (8003d24 <DMA_SetConfig+0x238>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d040      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <DMA_SetConfig+0x23c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d03b      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <DMA_SetConfig+0x240>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d036      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a37      	ldr	r2, [pc, #220]	; (8003d30 <DMA_SetConfig+0x244>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d031      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a35      	ldr	r2, [pc, #212]	; (8003d34 <DMA_SetConfig+0x248>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02c      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a34      	ldr	r2, [pc, #208]	; (8003d38 <DMA_SetConfig+0x24c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d027      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a32      	ldr	r2, [pc, #200]	; (8003d3c <DMA_SetConfig+0x250>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a31      	ldr	r2, [pc, #196]	; (8003d40 <DMA_SetConfig+0x254>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2f      	ldr	r2, [pc, #188]	; (8003d44 <DMA_SetConfig+0x258>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <DMA_SetConfig+0x25c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <DMA_SetConfig+0x260>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <DMA_SetConfig+0x264>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <DMA_SetConfig+0x268>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <DMA_SetConfig+0x26c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <DMA_SetConfig+0x1d4>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <DMA_SetConfig+0x1d6>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d05a      	beq.n	8003d7c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	223f      	movs	r2, #63	; 0x3f
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d108      	bne.n	8003d08 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d06:	e087      	b.n	8003e18 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
}
 8003d18:	e07e      	b.n	8003e18 <DMA_SetConfig+0x32c>
 8003d1a:	bf00      	nop
 8003d1c:	40020010 	.word	0x40020010
 8003d20:	40020028 	.word	0x40020028
 8003d24:	40020040 	.word	0x40020040
 8003d28:	40020058 	.word	0x40020058
 8003d2c:	40020070 	.word	0x40020070
 8003d30:	40020088 	.word	0x40020088
 8003d34:	400200a0 	.word	0x400200a0
 8003d38:	400200b8 	.word	0x400200b8
 8003d3c:	40020410 	.word	0x40020410
 8003d40:	40020428 	.word	0x40020428
 8003d44:	40020440 	.word	0x40020440
 8003d48:	40020458 	.word	0x40020458
 8003d4c:	40020470 	.word	0x40020470
 8003d50:	40020488 	.word	0x40020488
 8003d54:	400204a0 	.word	0x400204a0
 8003d58:	400204b8 	.word	0x400204b8
 8003d5c:	58025408 	.word	0x58025408
 8003d60:	5802541c 	.word	0x5802541c
 8003d64:	58025430 	.word	0x58025430
 8003d68:	58025444 	.word	0x58025444
 8003d6c:	58025458 	.word	0x58025458
 8003d70:	5802546c 	.word	0x5802546c
 8003d74:	58025480 	.word	0x58025480
 8003d78:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <DMA_SetConfig+0x338>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d022      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a27      	ldr	r2, [pc, #156]	; (8003e28 <DMA_SetConfig+0x33c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d01d      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <DMA_SetConfig+0x340>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d018      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <DMA_SetConfig+0x344>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <DMA_SetConfig+0x348>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00e      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <DMA_SetConfig+0x34c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d009      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <DMA_SetConfig+0x350>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <DMA_SetConfig+0x354>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <DMA_SetConfig+0x2e4>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <DMA_SetConfig+0x2e6>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d020      	beq.n	8003e18 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2201      	movs	r2, #1
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d108      	bne.n	8003e08 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	60da      	str	r2, [r3, #12]
}
 8003e06:	e007      	b.n	8003e18 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	58025408 	.word	0x58025408
 8003e28:	5802541c 	.word	0x5802541c
 8003e2c:	58025430 	.word	0x58025430
 8003e30:	58025444 	.word	0x58025444
 8003e34:	58025458 	.word	0x58025458
 8003e38:	5802546c 	.word	0x5802546c
 8003e3c:	58025480 	.word	0x58025480
 8003e40:	58025494 	.word	0x58025494

08003e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a42      	ldr	r2, [pc, #264]	; (8003f5c <DMA_CalcBaseAndBitshift+0x118>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a41      	ldr	r2, [pc, #260]	; (8003f60 <DMA_CalcBaseAndBitshift+0x11c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d045      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a3f      	ldr	r2, [pc, #252]	; (8003f64 <DMA_CalcBaseAndBitshift+0x120>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d040      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a3e      	ldr	r2, [pc, #248]	; (8003f68 <DMA_CalcBaseAndBitshift+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d03b      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3c      	ldr	r2, [pc, #240]	; (8003f6c <DMA_CalcBaseAndBitshift+0x128>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d036      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3b      	ldr	r2, [pc, #236]	; (8003f70 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d031      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <DMA_CalcBaseAndBitshift+0x130>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d02c      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a38      	ldr	r2, [pc, #224]	; (8003f78 <DMA_CalcBaseAndBitshift+0x134>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d027      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a36      	ldr	r2, [pc, #216]	; (8003f7c <DMA_CalcBaseAndBitshift+0x138>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a35      	ldr	r2, [pc, #212]	; (8003f80 <DMA_CalcBaseAndBitshift+0x13c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <DMA_CalcBaseAndBitshift+0x140>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <DMA_CalcBaseAndBitshift+0x144>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <DMA_CalcBaseAndBitshift+0x148>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <DMA_CalcBaseAndBitshift+0x150>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <DMA_CalcBaseAndBitshift+0x154>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <DMA_CalcBaseAndBitshift+0xac>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <DMA_CalcBaseAndBitshift+0xae>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d024      	beq.n	8003f40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3b10      	subs	r3, #16
 8003efe:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <DMA_CalcBaseAndBitshift+0x158>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d908      	bls.n	8003f30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	1d1a      	adds	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f2e:	e00d      	b.n	8003f4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3e:	e005      	b.n	8003f4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40020010 	.word	0x40020010
 8003f60:	40020028 	.word	0x40020028
 8003f64:	40020040 	.word	0x40020040
 8003f68:	40020058 	.word	0x40020058
 8003f6c:	40020070 	.word	0x40020070
 8003f70:	40020088 	.word	0x40020088
 8003f74:	400200a0 	.word	0x400200a0
 8003f78:	400200b8 	.word	0x400200b8
 8003f7c:	40020410 	.word	0x40020410
 8003f80:	40020428 	.word	0x40020428
 8003f84:	40020440 	.word	0x40020440
 8003f88:	40020458 	.word	0x40020458
 8003f8c:	40020470 	.word	0x40020470
 8003f90:	40020488 	.word	0x40020488
 8003f94:	400204a0 	.word	0x400204a0
 8003f98:	400204b8 	.word	0x400204b8
 8003f9c:	aaaaaaab 	.word	0xaaaaaaab
 8003fa0:	080074a8 	.word	0x080074a8
 8003fa4:	fffffc00 	.word	0xfffffc00

08003fa8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d120      	bne.n	8003ffe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d858      	bhi.n	8004076 <DMA_CheckFifoParam+0xce>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <DMA_CheckFifoParam+0x24>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fef 	.word	0x08003fef
 8003fd4:	08003fdd 	.word	0x08003fdd
 8003fd8:	08004077 	.word	0x08004077
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d048      	beq.n	800407a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fec:	e045      	b.n	800407a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ff6:	d142      	bne.n	800407e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ffc:	e03f      	b.n	800407e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004006:	d123      	bne.n	8004050 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	2b03      	cmp	r3, #3
 800400e:	d838      	bhi.n	8004082 <DMA_CheckFifoParam+0xda>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <DMA_CheckFifoParam+0x70>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	0800402f 	.word	0x0800402f
 8004020:	08004029 	.word	0x08004029
 8004024:	08004041 	.word	0x08004041
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
        break;
 800402c:	e030      	b.n	8004090 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d025      	beq.n	8004086 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800403e:	e022      	b.n	8004086 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004048:	d11f      	bne.n	800408a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800404e:	e01c      	b.n	800408a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	2b02      	cmp	r3, #2
 8004056:	d902      	bls.n	800405e <DMA_CheckFifoParam+0xb6>
 8004058:	2b03      	cmp	r3, #3
 800405a:	d003      	beq.n	8004064 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800405c:	e018      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
        break;
 8004062:	e015      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
    break;
 8004074:	e00b      	b.n	800408e <DMA_CheckFifoParam+0xe6>
        break;
 8004076:	bf00      	nop
 8004078:	e00a      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 800407a:	bf00      	nop
 800407c:	e008      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 800407e:	bf00      	nop
 8004080:	e006      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 8004082:	bf00      	nop
 8004084:	e004      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 8004086:	bf00      	nop
 8004088:	e002      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
    break;
 800408e:	bf00      	nop
    }
  }

  return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop

080040a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a38      	ldr	r2, [pc, #224]	; (8004194 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d022      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a36      	ldr	r2, [pc, #216]	; (8004198 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01d      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a35      	ldr	r2, [pc, #212]	; (800419c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d018      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a33      	ldr	r2, [pc, #204]	; (80041a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a32      	ldr	r2, [pc, #200]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a30      	ldr	r2, [pc, #192]	; (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2d      	ldr	r2, [pc, #180]	; (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01a      	beq.n	800413e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	3b08      	subs	r3, #8
 8004110:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a24      	ldr	r2, [pc, #144]	; (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800412c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800413c:	e024      	b.n	8004188 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3b10      	subs	r3, #16
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d806      	bhi.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d902      	bls.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3308      	adds	r3, #8
 8004164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004178:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	58025408 	.word	0x58025408
 8004198:	5802541c 	.word	0x5802541c
 800419c:	58025430 	.word	0x58025430
 80041a0:	58025444 	.word	0x58025444
 80041a4:	58025458 	.word	0x58025458
 80041a8:	5802546c 	.word	0x5802546c
 80041ac:	58025480 	.word	0x58025480
 80041b0:	58025494 	.word	0x58025494
 80041b4:	cccccccd 	.word	0xcccccccd
 80041b8:	16009600 	.word	0x16009600
 80041bc:	58025880 	.word	0x58025880
 80041c0:	aaaaaaab 	.word	0xaaaaaaab
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	4002040f 	.word	0x4002040f
 80041cc:	10008200 	.word	0x10008200
 80041d0:	40020880 	.word	0x40020880

080041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d04a      	beq.n	8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d847      	bhi.n	8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a24      	ldr	r2, [pc, #144]	; (8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01d      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a21      	ldr	r2, [pc, #132]	; (8004298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4b17      	ldr	r3, [pc, #92]	; (80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800425c:	671a      	str	r2, [r3, #112]	; 0x70
 800425e:	e009      	b.n	8004274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004272:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b01      	subs	r3, #1
 8004278:	2201      	movs	r2, #1
 800427a:	409a      	lsls	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	58025408 	.word	0x58025408
 8004290:	5802541c 	.word	0x5802541c
 8004294:	58025430 	.word	0x58025430
 8004298:	58025444 	.word	0x58025444
 800429c:	58025458 	.word	0x58025458
 80042a0:	5802546c 	.word	0x5802546c
 80042a4:	58025480 	.word	0x58025480
 80042a8:	58025494 	.word	0x58025494
 80042ac:	1600963f 	.word	0x1600963f
 80042b0:	58025940 	.word	0x58025940
 80042b4:	1000823f 	.word	0x1000823f
 80042b8:	40020940 	.word	0x40020940

080042bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042bc:	b480      	push	{r7}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042ca:	4b89      	ldr	r3, [pc, #548]	; (80044f0 <HAL_GPIO_Init+0x234>)
 80042cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042ce:	e194      	b.n	80045fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	2101      	movs	r1, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8186 	beq.w	80045f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00b      	beq.n	8004308 <HAL_GPIO_Init+0x4c>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d007      	beq.n	8004308 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042fc:	2b11      	cmp	r3, #17
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b12      	cmp	r3, #18
 8004306:	d130      	bne.n	800436a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800433e:	2201      	movs	r2, #1
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f003 0201 	and.w	r2, r3, #1
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0xee>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b12      	cmp	r3, #18
 80043a8:	d123      	bne.n	80043f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	220f      	movs	r2, #15
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	08da      	lsrs	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3208      	adds	r2, #8
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2203      	movs	r2, #3
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80e0 	beq.w	80045f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004434:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <HAL_GPIO_Init+0x238>)
 8004436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <HAL_GPIO_Init+0x238>)
 800443c:	f043 0302 	orr.w	r3, r3, #2
 8004440:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_GPIO_Init+0x238>)
 8004446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004452:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <HAL_GPIO_Init+0x23c>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_GPIO_Init+0x240>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d052      	beq.n	8004524 <HAL_GPIO_Init+0x268>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_GPIO_Init+0x244>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d031      	beq.n	80044ea <HAL_GPIO_Init+0x22e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_GPIO_Init+0x248>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <HAL_GPIO_Init+0x22a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_GPIO_Init+0x24c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_Init+0x226>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_GPIO_Init+0x250>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_Init+0x222>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_GPIO_Init+0x254>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_Init+0x21e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <HAL_GPIO_Init+0x258>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_Init+0x21a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_GPIO_Init+0x25c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_Init+0x216>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a18      	ldr	r2, [pc, #96]	; (800451c <HAL_GPIO_Init+0x260>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x212>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_GPIO_Init+0x264>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_Init+0x20e>
 80044c6:	2309      	movs	r3, #9
 80044c8:	e02d      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ca:	230a      	movs	r3, #10
 80044cc:	e02b      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ce:	2308      	movs	r3, #8
 80044d0:	e029      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e027      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044d6:	2306      	movs	r3, #6
 80044d8:	e025      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044da:	2305      	movs	r3, #5
 80044dc:	e023      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044de:	2304      	movs	r3, #4
 80044e0:	e021      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e01f      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e01d      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e01b      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ee:	bf00      	nop
 80044f0:	58000080 	.word	0x58000080
 80044f4:	58024400 	.word	0x58024400
 80044f8:	58000400 	.word	0x58000400
 80044fc:	58020000 	.word	0x58020000
 8004500:	58020400 	.word	0x58020400
 8004504:	58020800 	.word	0x58020800
 8004508:	58020c00 	.word	0x58020c00
 800450c:	58021000 	.word	0x58021000
 8004510:	58021400 	.word	0x58021400
 8004514:	58021800 	.word	0x58021800
 8004518:	58021c00 	.word	0x58021c00
 800451c:	58022000 	.word	0x58022000
 8004520:	58022400 	.word	0x58022400
 8004524:	2300      	movs	r3, #0
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	f002 0203 	and.w	r2, r2, #3
 800452c:	0092      	lsls	r2, r2, #2
 800452e:	4093      	lsls	r3, r2
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004536:	4938      	ldr	r1, [pc, #224]	; (8004618 <HAL_GPIO_Init+0x35c>)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	3302      	adds	r3, #2
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f47f ae63 	bne.w	80042d0 <HAL_GPIO_Init+0x14>
  }
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	3724      	adds	r7, #36	; 0x24
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	58000400 	.word	0x58000400

0800461c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_PWREx_ConfigSupply+0x70>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d00a      	beq.n	8004646 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004630:	4b16      	ldr	r3, [pc, #88]	; (800468c <HAL_PWREx_ConfigSupply+0x70>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d001      	beq.n	8004642 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e01f      	b.n	8004682 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e01d      	b.n	8004682 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <HAL_PWREx_ConfigSupply+0x70>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f023 0207 	bic.w	r2, r3, #7
 800464e:	490f      	ldr	r1, [pc, #60]	; (800468c <HAL_PWREx_ConfigSupply+0x70>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4313      	orrs	r3, r2
 8004654:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004656:	f7fb fec5 	bl	80003e4 <HAL_GetTick>
 800465a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800465c:	e009      	b.n	8004672 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800465e:	f7fb fec1 	bl	80003e4 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800466c:	d901      	bls.n	8004672 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e007      	b.n	8004682 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_PWREx_ConfigSupply+0x70>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467e:	d1ee      	bne.n	800465e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	58024800 	.word	0x58024800

08004690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e3ff      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8087 	beq.w	80047be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b0:	4b99      	ldr	r3, [pc, #612]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ba:	4b97      	ldr	r3, [pc, #604]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d007      	beq.n	80046d6 <HAL_RCC_OscConfig+0x46>
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	2b18      	cmp	r3, #24
 80046ca:	d110      	bne.n	80046ee <HAL_RCC_OscConfig+0x5e>
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d10b      	bne.n	80046ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d6:	4b90      	ldr	r3, [pc, #576]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d06c      	beq.n	80047bc <HAL_RCC_OscConfig+0x12c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d168      	bne.n	80047bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e3d9      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x76>
 80046f8:	4b87      	ldr	r3, [pc, #540]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a86      	ldr	r2, [pc, #536]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e02e      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x98>
 800470e:	4b82      	ldr	r3, [pc, #520]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a81      	ldr	r2, [pc, #516]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b7f      	ldr	r3, [pc, #508]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a7e      	ldr	r2, [pc, #504]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e01d      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0xbc>
 8004732:	4b79      	ldr	r3, [pc, #484]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a78      	ldr	r2, [pc, #480]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b76      	ldr	r3, [pc, #472]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a75      	ldr	r2, [pc, #468]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 800474c:	4b72      	ldr	r3, [pc, #456]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a71      	ldr	r2, [pc, #452]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a6e      	ldr	r2, [pc, #440]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fb fe3a 	bl	80003e4 <HAL_GetTick>
 8004770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004774:	f7fb fe36 	bl	80003e4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e38d      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004786:	4b64      	ldr	r3, [pc, #400]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0xe4>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fb fe26 	bl	80003e4 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fb fe22 	bl	80003e4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e379      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047ae:	4b5a      	ldr	r3, [pc, #360]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x10c>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80ae 	beq.w	8004928 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047cc:	4b52      	ldr	r3, [pc, #328]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047d6:	4b50      	ldr	r3, [pc, #320]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_RCC_OscConfig+0x162>
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2b18      	cmp	r3, #24
 80047e6:	d13a      	bne.n	800485e <HAL_RCC_OscConfig+0x1ce>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d135      	bne.n	800485e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f2:	4b49      	ldr	r3, [pc, #292]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCC_OscConfig+0x17a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e34b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	f7fb fe1b 	bl	8000444 <HAL_GetREVID>
 800480e:	4603      	mov	r3, r0
 8004810:	f241 0203 	movw	r2, #4099	; 0x1003
 8004814:	4293      	cmp	r3, r2
 8004816:	d817      	bhi.n	8004848 <HAL_RCC_OscConfig+0x1b8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d108      	bne.n	8004832 <HAL_RCC_OscConfig+0x1a2>
 8004820:	4b3d      	ldr	r3, [pc, #244]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004828:	4a3b      	ldr	r2, [pc, #236]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 800482a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004830:	e07a      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	031b      	lsls	r3, r3, #12
 8004840:	4935      	ldr	r1, [pc, #212]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004846:	e06f      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	4930      	ldr	r1, [pc, #192]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800485c:	e064      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d045      	beq.n	80048f2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004866:	4b2c      	ldr	r3, [pc, #176]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 0219 	bic.w	r2, r3, #25
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4929      	ldr	r1, [pc, #164]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fb fdb4 	bl	80003e4 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004880:	f7fb fdb0 	bl	80003e4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e307      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004892:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	f7fb fdd1 	bl	8000444 <HAL_GetREVID>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d817      	bhi.n	80048dc <HAL_RCC_OscConfig+0x24c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d108      	bne.n	80048c6 <HAL_RCC_OscConfig+0x236>
 80048b4:	4b18      	ldr	r3, [pc, #96]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80048bc:	4a16      	ldr	r2, [pc, #88]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c2:	6053      	str	r3, [r2, #4]
 80048c4:	e030      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	031b      	lsls	r3, r3, #12
 80048d4:	4910      	ldr	r1, [pc, #64]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
 80048da:	e025      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	490b      	ldr	r1, [pc, #44]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
 80048f0:	e01a      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <HAL_RCC_OscConfig+0x288>)
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fb fd71 	bl	80003e4 <HAL_GetTick>
 8004902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004906:	f7fb fd6d 	bl	80003e4 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d903      	bls.n	800491c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e2c4      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
 8004918:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800491c:	4ba4      	ldr	r3, [pc, #656]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ee      	bne.n	8004906 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a9 	beq.w	8004a88 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004936:	4b9e      	ldr	r3, [pc, #632]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800493e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004940:	4b9b      	ldr	r3, [pc, #620]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d007      	beq.n	800495c <HAL_RCC_OscConfig+0x2cc>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b18      	cmp	r3, #24
 8004950:	d13a      	bne.n	80049c8 <HAL_RCC_OscConfig+0x338>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d135      	bne.n	80049c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800495c:	4b94      	ldr	r3, [pc, #592]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_OscConfig+0x2e4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e296      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004974:	f7fb fd66 	bl	8000444 <HAL_GetREVID>
 8004978:	4603      	mov	r3, r0
 800497a:	f241 0203 	movw	r2, #4099	; 0x1003
 800497e:	4293      	cmp	r3, r2
 8004980:	d817      	bhi.n	80049b2 <HAL_RCC_OscConfig+0x322>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	2b20      	cmp	r3, #32
 8004988:	d108      	bne.n	800499c <HAL_RCC_OscConfig+0x30c>
 800498a:	4b89      	ldr	r3, [pc, #548]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004992:	4a87      	ldr	r2, [pc, #540]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004998:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800499a:	e075      	b.n	8004a88 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800499c:	4b84      	ldr	r3, [pc, #528]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	069b      	lsls	r3, r3, #26
 80049aa:	4981      	ldr	r1, [pc, #516]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049b0:	e06a      	b.n	8004a88 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049b2:	4b7f      	ldr	r3, [pc, #508]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	497b      	ldr	r1, [pc, #492]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049c6:	e05f      	b.n	8004a88 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d042      	beq.n	8004a56 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049d0:	4b77      	ldr	r3, [pc, #476]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a76      	ldr	r2, [pc, #472]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 80049d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fb fd02 	bl	80003e4 <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049e4:	f7fb fcfe 	bl	80003e4 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e255      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049f6:	4b6e      	ldr	r3, [pc, #440]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a02:	f7fb fd1f 	bl	8000444 <HAL_GetREVID>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d817      	bhi.n	8004a40 <HAL_RCC_OscConfig+0x3b0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d108      	bne.n	8004a2a <HAL_RCC_OscConfig+0x39a>
 8004a18:	4b65      	ldr	r3, [pc, #404]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a20:	4a63      	ldr	r2, [pc, #396]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a26:	6053      	str	r3, [r2, #4]
 8004a28:	e02e      	b.n	8004a88 <HAL_RCC_OscConfig+0x3f8>
 8004a2a:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	069b      	lsls	r3, r3, #26
 8004a38:	495d      	ldr	r1, [pc, #372]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	604b      	str	r3, [r1, #4]
 8004a3e:	e023      	b.n	8004a88 <HAL_RCC_OscConfig+0x3f8>
 8004a40:	4b5b      	ldr	r3, [pc, #364]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	4958      	ldr	r1, [pc, #352]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
 8004a54:	e018      	b.n	8004a88 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a56:	4b56      	ldr	r3, [pc, #344]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a55      	ldr	r2, [pc, #340]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fb fcbf 	bl	80003e4 <HAL_GetTick>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a6a:	f7fb fcbb 	bl	80003e4 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e212      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d036      	beq.n	8004b02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9c:	4b44      	ldr	r3, [pc, #272]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa0:	4a43      	ldr	r2, [pc, #268]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fb fc9c 	bl	80003e4 <HAL_GetTick>
 8004aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fb fc98 	bl	80003e4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1ef      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x420>
 8004ace:	e018      	b.n	8004b02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad0:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad4:	4a36      	ldr	r2, [pc, #216]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fb fc82 	bl	80003e4 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7fb fc7e 	bl	80003e4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1d5      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004af6:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d036      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d019      	beq.n	8004b4a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b16:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a25      	ldr	r2, [pc, #148]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b22:	f7fb fc5f 	bl	80003e4 <HAL_GetTick>
 8004b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b2a:	f7fb fc5b 	bl	80003e4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1b2      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b3c:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x49a>
 8004b48:	e018      	b.n	8004b7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b4a:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b56:	f7fb fc45 	bl	80003e4 <HAL_GetTick>
 8004b5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b5e:	f7fb fc41 	bl	80003e4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e198      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <HAL_RCC_OscConfig+0x520>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8085 	beq.w	8004c94 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_RCC_OscConfig+0x524>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <HAL_RCC_OscConfig+0x524>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b96:	f7fb fc25 	bl	80003e4 <HAL_GetTick>
 8004b9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b9c:	e00c      	b.n	8004bb8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fb fc21 	bl	80003e4 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b64      	cmp	r3, #100	; 0x64
 8004baa:	d905      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e178      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bb8:	4b96      	ldr	r3, [pc, #600]	; (8004e14 <HAL_RCC_OscConfig+0x784>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ec      	beq.n	8004b9e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x54a>
 8004bcc:	4b92      	ldr	r3, [pc, #584]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a91      	ldr	r2, [pc, #580]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd8:	e02d      	b.n	8004c36 <HAL_RCC_OscConfig+0x5a6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x56c>
 8004be2:	4b8d      	ldr	r3, [pc, #564]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	4a8c      	ldr	r2, [pc, #560]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6713      	str	r3, [r2, #112]	; 0x70
 8004bee:	4b8a      	ldr	r3, [pc, #552]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4a89      	ldr	r2, [pc, #548]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004bf4:	f023 0304 	bic.w	r3, r3, #4
 8004bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfa:	e01c      	b.n	8004c36 <HAL_RCC_OscConfig+0x5a6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCC_OscConfig+0x58e>
 8004c04:	4b84      	ldr	r3, [pc, #528]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c08:	4a83      	ldr	r2, [pc, #524]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c10:	4b81      	ldr	r3, [pc, #516]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a80      	ldr	r2, [pc, #512]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	e00b      	b.n	8004c36 <HAL_RCC_OscConfig+0x5a6>
 8004c1e:	4b7e      	ldr	r3, [pc, #504]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a7d      	ldr	r2, [pc, #500]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	4b7b      	ldr	r3, [pc, #492]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a7a      	ldr	r2, [pc, #488]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d015      	beq.n	8004c6a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fb fbd1 	bl	80003e4 <HAL_GetTick>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fb fbcd 	bl	80003e4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e122      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5c:	4b6e      	ldr	r3, [pc, #440]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ee      	beq.n	8004c46 <HAL_RCC_OscConfig+0x5b6>
 8004c68:	e014      	b.n	8004c94 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6a:	f7fb fbbb 	bl	80003e4 <HAL_GetTick>
 8004c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fb fbb7 	bl	80003e4 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e10c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c88:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ee      	bne.n	8004c72 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8101 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c9e:	4b5e      	ldr	r3, [pc, #376]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca6:	2b18      	cmp	r3, #24
 8004ca8:	f000 80bc 	beq.w	8004e24 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	f040 8095 	bne.w	8004de0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a57      	ldr	r2, [pc, #348]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fb fb8f 	bl	80003e4 <HAL_GetTick>
 8004cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fb fb8b 	bl	80003e4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0e2      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cdc:	4b4e      	ldr	r3, [pc, #312]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce8:	4b4b      	ldr	r3, [pc, #300]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cec:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <HAL_RCC_OscConfig+0x78c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cf8:	0112      	lsls	r2, r2, #4
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	4946      	ldr	r1, [pc, #280]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	628b      	str	r3, [r1, #40]	; 0x28
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	3b01      	subs	r3, #1
 8004d08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d10:	3b01      	subs	r3, #1
 8004d12:	025b      	lsls	r3, r3, #9
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	061b      	lsls	r3, r3, #24
 8004d2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d32:	4939      	ldr	r1, [pc, #228]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004d38:	4b37      	ldr	r3, [pc, #220]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4a36      	ldr	r2, [pc, #216]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d44:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d48:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <HAL_RCC_OscConfig+0x790>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d50:	00d2      	lsls	r2, r2, #3
 8004d52:	4931      	ldr	r1, [pc, #196]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d58:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	f023 020c 	bic.w	r2, r3, #12
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	492c      	ldr	r1, [pc, #176]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d6a:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f023 0202 	bic.w	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4928      	ldr	r1, [pc, #160]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d7c:	4b26      	ldr	r3, [pc, #152]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d88:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	4a22      	ldr	r2, [pc, #136]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d94:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	4a1c      	ldr	r2, [pc, #112]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fb fb14 	bl	80003e4 <HAL_GetTick>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fb fb10 	bl	80003e4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e067      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x730>
 8004dde:	e05f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fb fafa 	bl	80003e4 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fb faf6 	bl	80003e4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e04d      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e06:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <HAL_RCC_OscConfig+0x788>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x764>
 8004e12:	e045      	b.n	8004ea0 <HAL_RCC_OscConfig+0x810>
 8004e14:	58024800 	.word	0x58024800
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	fffffc0c 	.word	0xfffffc0c
 8004e20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e24:	4b21      	ldr	r3, [pc, #132]	; (8004eac <HAL_RCC_OscConfig+0x81c>)
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e2a:	4b20      	ldr	r3, [pc, #128]	; (8004eac <HAL_RCC_OscConfig+0x81c>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d031      	beq.n	8004e9c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 0203 	and.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d12a      	bne.n	8004e9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d122      	bne.n	8004e9c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d11a      	bne.n	8004e9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0a5b      	lsrs	r3, r3, #9
 8004e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d111      	bne.n	8004e9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	0c1b      	lsrs	r3, r3, #16
 8004e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d108      	bne.n	8004e9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	0e1b      	lsrs	r3, r3, #24
 8004e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3730      	adds	r7, #48	; 0x30
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	58024400 	.word	0x58024400

08004eb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e19c      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d910      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b87      	ldr	r3, [pc, #540]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	4985      	ldr	r1, [pc, #532]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e184      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	4b7b      	ldr	r3, [pc, #492]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d908      	bls.n	8004f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f10:	4b78      	ldr	r3, [pc, #480]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	4975      	ldr	r1, [pc, #468]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d010      	beq.n	8004f50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	4b70      	ldr	r3, [pc, #448]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d908      	bls.n	8004f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f3e:	4b6d      	ldr	r3, [pc, #436]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	496a      	ldr	r1, [pc, #424]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	4b64      	ldr	r3, [pc, #400]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d908      	bls.n	8004f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f6c:	4b61      	ldr	r3, [pc, #388]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	495e      	ldr	r1, [pc, #376]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d010      	beq.n	8004fac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	4b59      	ldr	r3, [pc, #356]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d908      	bls.n	8004fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f9a:	4b56      	ldr	r3, [pc, #344]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	4953      	ldr	r1, [pc, #332]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d908      	bls.n	8004fda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b4a      	ldr	r3, [pc, #296]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f023 020f 	bic.w	r2, r3, #15
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4947      	ldr	r1, [pc, #284]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d055      	beq.n	8005092 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fe6:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4940      	ldr	r1, [pc, #256]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d107      	bne.n	8005010 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005000:	4b3c      	ldr	r3, [pc, #240]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d121      	bne.n	8005050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0f6      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d107      	bne.n	8005028 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005018:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d115      	bne.n	8005050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0ea      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d107      	bne.n	8005040 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005030:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0de      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005040:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0d6      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005050:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f023 0207 	bic.w	r2, r3, #7
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4925      	ldr	r1, [pc, #148]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 800505e:	4313      	orrs	r3, r2
 8005060:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005062:	f7fb f9bf 	bl	80003e4 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005068:	e00a      	b.n	8005080 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800506a:	f7fb f9bb 	bl	80003e4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e0be      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005080:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	429a      	cmp	r2, r3
 8005090:	d1eb      	bne.n	800506a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d208      	bcs.n	80050c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f023 020f 	bic.w	r2, r3, #15
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	490e      	ldr	r1, [pc, #56]	; (80050f4 <HAL_RCC_ClockConfig+0x244>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d214      	bcs.n	80050f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 020f 	bic.w	r2, r3, #15
 80050d6:	4906      	ldr	r1, [pc, #24]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <HAL_RCC_ClockConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e086      	b.n	80051fe <HAL_RCC_ClockConfig+0x34e>
 80050f0:	52002000 	.word	0x52002000
 80050f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005110:	429a      	cmp	r2, r3
 8005112:	d208      	bcs.n	8005126 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005114:	4b3c      	ldr	r3, [pc, #240]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	4939      	ldr	r1, [pc, #228]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005122:	4313      	orrs	r3, r2
 8005124:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	4b34      	ldr	r3, [pc, #208]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800513e:	429a      	cmp	r2, r3
 8005140:	d208      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005142:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	492e      	ldr	r1, [pc, #184]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005150:	4313      	orrs	r3, r2
 8005152:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800516c:	429a      	cmp	r2, r3
 800516e:	d208      	bcs.n	8005182 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005170:	4b25      	ldr	r3, [pc, #148]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4922      	ldr	r1, [pc, #136]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 800517e:	4313      	orrs	r3, r2
 8005180:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d010      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800519a:	429a      	cmp	r2, r3
 800519c:	d208      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800519e:	4b1a      	ldr	r3, [pc, #104]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	4917      	ldr	r1, [pc, #92]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051b0:	f000 f834 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	4912      	ldr	r1, [pc, #72]	; (800520c <HAL_RCC_ClockConfig+0x35c>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
 80051cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <HAL_RCC_ClockConfig+0x358>)
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	4a0d      	ldr	r2, [pc, #52]	; (800520c <HAL_RCC_ClockConfig+0x35c>)
 80051d8:	5cd3      	ldrb	r3, [r2, r3]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x360>)
 80051e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051e8:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x364>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_RCC_ClockConfig+0x368>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fb f8ac 	bl	8000350 <HAL_InitTick>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	58024400 	.word	0x58024400
 800520c:	080074b0 	.word	0x080074b0
 8005210:	24000010 	.word	0x24000010
 8005214:	2400000c 	.word	0x2400000c
 8005218:	24000000 	.word	0x24000000

0800521c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005222:	4bb3      	ldr	r3, [pc, #716]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522a:	2b18      	cmp	r3, #24
 800522c:	f200 8155 	bhi.w	80054da <HAL_RCC_GetSysClockFreq+0x2be>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	0800529d 	.word	0x0800529d
 800523c:	080054db 	.word	0x080054db
 8005240:	080054db 	.word	0x080054db
 8005244:	080054db 	.word	0x080054db
 8005248:	080054db 	.word	0x080054db
 800524c:	080054db 	.word	0x080054db
 8005250:	080054db 	.word	0x080054db
 8005254:	080054db 	.word	0x080054db
 8005258:	080052c3 	.word	0x080052c3
 800525c:	080054db 	.word	0x080054db
 8005260:	080054db 	.word	0x080054db
 8005264:	080054db 	.word	0x080054db
 8005268:	080054db 	.word	0x080054db
 800526c:	080054db 	.word	0x080054db
 8005270:	080054db 	.word	0x080054db
 8005274:	080054db 	.word	0x080054db
 8005278:	080052c9 	.word	0x080052c9
 800527c:	080054db 	.word	0x080054db
 8005280:	080054db 	.word	0x080054db
 8005284:	080054db 	.word	0x080054db
 8005288:	080054db 	.word	0x080054db
 800528c:	080054db 	.word	0x080054db
 8005290:	080054db 	.word	0x080054db
 8005294:	080054db 	.word	0x080054db
 8005298:	080052cf 	.word	0x080052cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529c:	4b94      	ldr	r3, [pc, #592]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052a8:	4b91      	ldr	r3, [pc, #580]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	08db      	lsrs	r3, r3, #3
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	4a90      	ldr	r2, [pc, #576]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80052ba:	e111      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052bc:	4b8d      	ldr	r3, [pc, #564]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052be:	61bb      	str	r3, [r7, #24]
    break;
 80052c0:	e10e      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80052c2:	4b8d      	ldr	r3, [pc, #564]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052c4:	61bb      	str	r3, [r7, #24]
    break;
 80052c6:	e10b      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80052c8:	4b8c      	ldr	r3, [pc, #560]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052ca:	61bb      	str	r3, [r7, #24]
    break;
 80052cc:	e108      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052ce:	4b88      	ldr	r3, [pc, #544]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80052d8:	4b85      	ldr	r3, [pc, #532]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052e4:	4b82      	ldr	r3, [pc, #520]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80052ee:	4b80      	ldr	r3, [pc, #512]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	08db      	lsrs	r3, r3, #3
 80052f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80e1 	beq.w	80054d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b02      	cmp	r3, #2
 8005316:	f000 8083 	beq.w	8005420 <HAL_RCC_GetSysClockFreq+0x204>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b02      	cmp	r3, #2
 800531e:	f200 80a1 	bhi.w	8005464 <HAL_RCC_GetSysClockFreq+0x248>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x114>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d056      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800532e:	e099      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005330:	4b6f      	ldr	r3, [pc, #444]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02d      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800533c:	4b6c      	ldr	r3, [pc, #432]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	08db      	lsrs	r3, r3, #3
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	4a6b      	ldr	r2, [pc, #428]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
 800534c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005366:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005376:	ed97 6a02 	vldr	s12, [r7, #8]
 800537a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800537e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800538a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005396:	e087      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005504 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053aa:	4b51      	ldr	r3, [pc, #324]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80053be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005500 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053da:	e065      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005508 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ee:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005402:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005500 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541e:	e043      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800550c <HAL_RCC_GetSysClockFreq+0x2f0>
 800542e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005432:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005442:	ed97 6a02 	vldr	s12, [r7, #8]
 8005446:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800544a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005462:	e021      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005508 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005476:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005486:	ed97 6a02 	vldr	s12, [r7, #8]
 800548a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800548e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	0a5b      	lsrs	r3, r3, #9
 80054ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b2:	3301      	adds	r3, #1
 80054b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054cc:	ee17 3a90 	vmov	r3, s15
 80054d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80054d2:	e005      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
    break;
 80054d8:	e002      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054dc:	61bb      	str	r3, [r7, #24]
    break;
 80054de:	bf00      	nop
  }

  return sysclockfreq;
 80054e0:	69bb      	ldr	r3, [r7, #24]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3724      	adds	r7, #36	; 0x24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	58024400 	.word	0x58024400
 80054f4:	03d09000 	.word	0x03d09000
 80054f8:	003d0900 	.word	0x003d0900
 80054fc:	017d7840 	.word	0x017d7840
 8005500:	46000000 	.word	0x46000000
 8005504:	4c742400 	.word	0x4c742400
 8005508:	4a742400 	.word	0x4a742400
 800550c:	4bbebc20 	.word	0x4bbebc20

08005510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005516:	f7ff fe81 	bl	800521c <HAL_RCC_GetSysClockFreq>
 800551a:	4602      	mov	r2, r0
 800551c:	4b10      	ldr	r3, [pc, #64]	; (8005560 <HAL_RCC_GetHCLKFreq+0x50>)
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	490f      	ldr	r1, [pc, #60]	; (8005564 <HAL_RCC_GetHCLKFreq+0x54>)
 8005528:	5ccb      	ldrb	r3, [r1, r3]
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	fa22 f303 	lsr.w	r3, r2, r3
 8005532:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_RCC_GetHCLKFreq+0x50>)
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	4a09      	ldr	r2, [pc, #36]	; (8005564 <HAL_RCC_GetHCLKFreq+0x54>)
 800553e:	5cd3      	ldrb	r3, [r2, r3]
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	fa22 f303 	lsr.w	r3, r2, r3
 800554a:	4a07      	ldr	r2, [pc, #28]	; (8005568 <HAL_RCC_GetHCLKFreq+0x58>)
 800554c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800554e:	4a07      	ldr	r2, [pc, #28]	; (800556c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <HAL_RCC_GetHCLKFreq+0x58>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	58024400 	.word	0x58024400
 8005564:	080074b0 	.word	0x080074b0
 8005568:	24000010 	.word	0x24000010
 800556c:	2400000c 	.word	0x2400000c

08005570 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b090      	sub	sp, #64	; 0x40
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557e:	f040 8095 	bne.w	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005582:	4bae      	ldr	r3, [pc, #696]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2b04      	cmp	r3, #4
 8005590:	f200 8088 	bhi.w	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005594:	a201      	add	r2, pc, #4	; (adr r2, 800559c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055b1 	.word	0x080055b1
 80055a0:	080055d9 	.word	0x080055d9
 80055a4:	08005601 	.word	0x08005601
 80055a8:	0800569d 	.word	0x0800569d
 80055ac:	08005629 	.word	0x08005629

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055b0:	4ba2      	ldr	r3, [pc, #648]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055bc:	d108      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 ff64 	bl	8006490 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055cc:	f000 bc95 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055d4:	f000 bc91 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055d8:	4b98      	ldr	r3, [pc, #608]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e4:	d108      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e6:	f107 0318 	add.w	r3, r7, #24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fca8 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055f4:	f000 bc81 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055fc:	f000 bc7d 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005600:	4b8e      	ldr	r3, [pc, #568]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560c:	d108      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800560e:	f107 030c 	add.w	r3, r7, #12
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fde8 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800561c:	f000 bc6d 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005624:	f000 bc69 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005628:	4b84      	ldr	r3, [pc, #528]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005630:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005632:	4b82      	ldr	r3, [pc, #520]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b04      	cmp	r3, #4
 800563c:	d10c      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005644:	4b7d      	ldr	r3, [pc, #500]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	08db      	lsrs	r3, r3, #3
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005656:	e01f      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005658:	4b78      	ldr	r3, [pc, #480]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005664:	d106      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800566c:	d102      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800566e:	4b75      	ldr	r3, [pc, #468]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005672:	e011      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005674:	4b71      	ldr	r3, [pc, #452]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005680:	d106      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005688:	d102      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800568a:	4b6f      	ldr	r3, [pc, #444]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568e:	e003      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005694:	f000 bc31 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005698:	f000 bc2f 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800569c:	4b6b      	ldr	r3, [pc, #428]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056a0:	f000 bc2b 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056a8:	f000 bc27 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b2:	f040 8095 	bne.w	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80056b6:	4b61      	ldr	r3, [pc, #388]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80056be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c6:	d04d      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	f200 8084 	bhi.w	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	2bc0      	cmp	r3, #192	; 0xc0
 80056d6:	d07d      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2bc0      	cmp	r3, #192	; 0xc0
 80056dc:	d87d      	bhi.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d02d      	beq.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d877      	bhi.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d012      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80056f6:	e070      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056f8:	4b50      	ldr	r3, [pc, #320]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005704:	d107      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fec0 	bl	8006490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005714:	e3f1      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800571a:	e3ee      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800571c:	4b47      	ldr	r3, [pc, #284]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005728:	d107      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800572a:	f107 0318 	add.w	r3, r7, #24
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fc06 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005738:	e3df      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800573e:	e3dc      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005740:	4b3e      	ldr	r3, [pc, #248]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800574e:	f107 030c 	add.w	r3, r7, #12
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fd48 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800575c:	e3cd      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005762:	e3ca      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005764:	4b35      	ldr	r3, [pc, #212]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800576c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800576e:	4b33      	ldr	r3, [pc, #204]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d10c      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005780:	4b2e      	ldr	r3, [pc, #184]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005792:	e01e      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005794:	4b29      	ldr	r3, [pc, #164]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a0:	d106      	bne.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a8:	d102      	bne.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057aa:	4b26      	ldr	r3, [pc, #152]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ae:	e010      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057b0:	4b22      	ldr	r3, [pc, #136]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057bc:	d106      	bne.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c4:	d102      	bne.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057c6:	4b20      	ldr	r3, [pc, #128]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ca:	e002      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057d0:	e393      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80057d2:	e392      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057d8:	e38f      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057de:	e38c      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e6:	f040 80a7 	bne.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057fa:	d05f      	beq.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005802:	f200 8096 	bhi.w	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800580c:	f000 808e 	beq.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005816:	f200 808c 	bhi.w	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005820:	d03a      	beq.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005828:	f200 8083 	bhi.w	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00e      	beq.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005838:	d01c      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800583a:	e07a      	b.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800583c:	58024400 	.word	0x58024400
 8005840:	03d09000 	.word	0x03d09000
 8005844:	003d0900 	.word	0x003d0900
 8005848:	017d7840 	.word	0x017d7840
 800584c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005850:	4baa      	ldr	r3, [pc, #680]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800585c:	d107      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800585e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fe14 	bl	8006490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800586c:	e345      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005872:	e342      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005874:	4ba1      	ldr	r3, [pc, #644]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005880:	d107      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005882:	f107 0318 	add.w	r3, r7, #24
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fb5a 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005890:	e333      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005896:	e330      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005898:	4b98      	ldr	r3, [pc, #608]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a4:	d107      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058a6:	f107 030c 	add.w	r3, r7, #12
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fc9c 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058b4:	e321      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ba:	e31e      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058bc:	4b8f      	ldr	r3, [pc, #572]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058c6:	4b8d      	ldr	r3, [pc, #564]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d10c      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058d8:	4b88      	ldr	r3, [pc, #544]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	08db      	lsrs	r3, r3, #3
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	4a87      	ldr	r2, [pc, #540]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058e4:	fa22 f303 	lsr.w	r3, r2, r3
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ea:	e01e      	b.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058ec:	4b83      	ldr	r3, [pc, #524]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f8:	d106      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005900:	d102      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005902:	4b80      	ldr	r3, [pc, #512]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005906:	e010      	b.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005908:	4b7c      	ldr	r3, [pc, #496]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005914:	d106      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591c:	d102      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800591e:	4b7a      	ldr	r3, [pc, #488]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005922:	e002      	b.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005928:	e2e7      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800592a:	e2e6      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800592c:	4b77      	ldr	r3, [pc, #476]	; (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005930:	e2e3      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005936:	e2e0      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593e:	f040 809c 	bne.w	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005942:	4b6e      	ldr	r3, [pc, #440]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800594a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005952:	d054      	beq.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800595a:	f200 808b 	bhi.w	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005964:	f000 8083 	beq.w	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800596e:	f200 8081 	bhi.w	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005978:	d02f      	beq.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005980:	d878      	bhi.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	2b00      	cmp	r3, #0
 8005986:	d004      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800598e:	d012      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005990:	e070      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005992:	4b5a      	ldr	r3, [pc, #360]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800599e:	d107      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fd73 	bl	8006490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059ae:	e2a4      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059b4:	e2a1      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b6:	4b51      	ldr	r3, [pc, #324]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c2:	d107      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c4:	f107 0318 	add.w	r3, r7, #24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fab9 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80059d2:	e292      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d8:	e28f      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059da:	4b48      	ldr	r3, [pc, #288]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e6:	d107      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059e8:	f107 030c 	add.w	r3, r7, #12
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fbfb 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059f6:	e280      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059fc:	e27d      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059fe:	4b3f      	ldr	r3, [pc, #252]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a08:	4b3c      	ldr	r3, [pc, #240]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d10c      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	08db      	lsrs	r3, r3, #3
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	4a36      	ldr	r2, [pc, #216]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2c:	e01e      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a2e:	4b33      	ldr	r3, [pc, #204]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3a:	d106      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d102      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a44:	4b2f      	ldr	r3, [pc, #188]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a48:	e010      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a4a:	4b2c      	ldr	r3, [pc, #176]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a56:	d106      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a60:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a64:	e002      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a6a:	e246      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a6c:	e245      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a6e:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a72:	e242      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a78:	e23f      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	f040 80a8 	bne.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a94:	d060      	beq.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a9c:	f200 8097 	bhi.w	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aa6:	f000 808f 	beq.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ab0:	f200 808d 	bhi.w	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aba:	d03b      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac2:	f200 8084 	bhi.w	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d01d      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005ad4:	e07b      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fcd1 	bl	8006490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005af2:	e202      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af8:	e1ff      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
 8005b00:	03d09000 	.word	0x03d09000
 8005b04:	003d0900 	.word	0x003d0900
 8005b08:	017d7840 	.word	0x017d7840
 8005b0c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b10:	4ba3      	ldr	r3, [pc, #652]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b1e:	f107 0318 	add.w	r3, r7, #24
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fa0c 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b2c:	e1e5      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b32:	e1e2      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b34:	4b9a      	ldr	r3, [pc, #616]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b40:	d107      	bne.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fb4e 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b50:	e1d3      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b56:	e1d0      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b58:	4b91      	ldr	r3, [pc, #580]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b62:	4b8f      	ldr	r3, [pc, #572]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d10c      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b74:	4b8a      	ldr	r3, [pc, #552]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	4a89      	ldr	r2, [pc, #548]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b80:	fa22 f303 	lsr.w	r3, r2, r3
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b86:	e01e      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b88:	4b85      	ldr	r3, [pc, #532]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b94:	d106      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b9c:	d102      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b9e:	4b82      	ldr	r3, [pc, #520]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba2:	e010      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ba4:	4b7e      	ldr	r3, [pc, #504]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bb0:	d106      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005bba:	4b7c      	ldr	r3, [pc, #496]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bbe:	e002      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005bc4:	e199      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005bc6:	e198      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bc8:	4b79      	ldr	r3, [pc, #484]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bcc:	e195      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bd2:	e192      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bda:	d173      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005bdc:	4b70      	ldr	r3, [pc, #448]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005be4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bec:	d02f      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bf4:	d863      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c02:	d012      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005c04:	e05b      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c06:	4b66      	ldr	r3, [pc, #408]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c12:	d107      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c14:	f107 0318 	add.w	r3, r7, #24
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f991 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c22:	e16a      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c28:	e167      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c2a:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c36:	d107      	bne.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c38:	f107 030c 	add.w	r3, r7, #12
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fad3 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c46:	e158      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c4c:	e155      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c4e:	4b54      	ldr	r3, [pc, #336]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c58:	4b51      	ldr	r3, [pc, #324]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c6a:	4b4d      	ldr	r3, [pc, #308]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	08db      	lsrs	r3, r3, #3
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	4a4b      	ldr	r2, [pc, #300]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c76:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7c:	e01e      	b.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c7e:	4b48      	ldr	r3, [pc, #288]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8a:	d106      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c92:	d102      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c94:	4b44      	ldr	r3, [pc, #272]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c98:	e010      	b.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c9a:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca6:	d106      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cae:	d102      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005cb0:	4b3e      	ldr	r3, [pc, #248]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb4:	e002      	b.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005cba:	e11e      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cbc:	e11d      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cc2:	e11a      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cca:	d133      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005ccc:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce2:	d012      	beq.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005ce4:	e023      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ce6:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fbc9 	bl	8006490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d02:	e0fa      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d08:	e0f7      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d0a:	4b25      	ldr	r3, [pc, #148]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d16:	d107      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d18:	f107 0318 	add.w	r3, r7, #24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f90f 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d26:	e0e8      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d2c:	e0e5      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d32:	e0e2      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d3a:	f040 808f 	bne.w	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d4e:	d075      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d56:	d87e      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5e:	d060      	beq.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d66:	d876      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d6e:	d045      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d76:	d86e      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d7e:	d02b      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d86:	d866      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d94:	d00e      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005d96:	e05e      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005d98:	f000 f8bc 	bl	8005f14 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d9c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005d9e:	e0ac      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005da0:	58024400 	.word	0x58024400
 8005da4:	03d09000 	.word	0x03d09000
 8005da8:	003d0900 	.word	0x003d0900
 8005dac:	017d7840 	.word	0x017d7840
 8005db0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc2:	f107 0318 	add.w	r3, r7, #24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f8ba 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005dd0:	e093      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dd6:	e090      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dd8:	4b4a      	ldr	r3, [pc, #296]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de4:	d107      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f9fc 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005df4:	e081      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dfa:	e07e      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dfc:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d109      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e08:	4b3e      	ldr	r3, [pc, #248]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	4a3d      	ldr	r2, [pc, #244]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e1a:	e06e      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e20:	e06b      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e22:	4b38      	ldr	r3, [pc, #224]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2e:	d102      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005e30:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e34:	e061      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e3a:	e05e      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e3c:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e48:	d102      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e4e:	e054      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e54:	e051      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e5a:	e04e      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e62:	d148      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005e64:	4b27      	ldr	r3, [pc, #156]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e74:	d02a      	beq.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7c:	d838      	bhi.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e8a:	d00d      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005e8c:	e030      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e8e:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e9a:	d102      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005e9c:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ea0:	e02b      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea6:	e028      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ea8:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fae8 	bl	8006490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ec4:	e019      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eca:	e016      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed8:	d107      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eda:	f107 0318 	add.w	r3, r7, #24
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f82e 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ee8:	e007      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eee:	e004      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ef4:	e001      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3740      	adds	r7, #64	; 0x40
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	58024400 	.word	0x58024400
 8005f08:	03d09000 	.word	0x03d09000
 8005f0c:	003d0900 	.word	0x003d0900
 8005f10:	017d7840 	.word	0x017d7840

08005f14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f18:	f7ff fafa 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4904      	ldr	r1, [pc, #16]	; (8005f3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	080074b0 	.word	0x080074b0

08005f40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	; 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f48:	4ba1      	ldr	r3, [pc, #644]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005f52:	4b9f      	ldr	r3, [pc, #636]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	0b1b      	lsrs	r3, r3, #12
 8005f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f5e:	4b9c      	ldr	r3, [pc, #624]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005f6a:	4b99      	ldr	r3, [pc, #612]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8111 	beq.w	80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	f000 8083 	beq.w	800609c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f200 80a1 	bhi.w	80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d056      	beq.n	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005faa:	e099      	b.n	80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fac:	4b88      	ldr	r3, [pc, #544]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d02d      	beq.n	8006014 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fb8:	4b85      	ldr	r3, [pc, #532]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	4a84      	ldr	r2, [pc, #528]	; (80061d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b7b      	ldr	r3, [pc, #492]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006012:	e087      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b6a      	ldr	r3, [pc, #424]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a03 	vldr	s12, [r7, #12]
 800603a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006056:	e065      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b59      	ldr	r3, [pc, #356]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a03 	vldr	s12, [r7, #12]
 800607e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800609a:	e043      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b48      	ldr	r3, [pc, #288]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060de:	e021      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b37      	ldr	r3, [pc, #220]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a03 	vldr	s12, [r7, #12]
 8006106:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006122:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006124:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	0a5b      	lsrs	r3, r3, #9
 800612a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800613a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614a:	ee17 2a90 	vmov	r2, s15
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006152:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800616c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006178:	ee17 2a90 	vmov	r2, s15
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006180:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	0e1b      	lsrs	r3, r3, #24
 8006186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619a:	edd7 6a07 	vldr	s13, [r7, #28]
 800619e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a6:	ee17 2a90 	vmov	r2, s15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061ae:	e008      	b.n	80061c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
}
 80061c2:	bf00      	nop
 80061c4:	3724      	adds	r7, #36	; 0x24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	58024400 	.word	0x58024400
 80061d4:	03d09000 	.word	0x03d09000
 80061d8:	46000000 	.word	0x46000000
 80061dc:	4c742400 	.word	0x4c742400
 80061e0:	4a742400 	.word	0x4a742400
 80061e4:	4bbebc20 	.word	0x4bbebc20

080061e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	; 0x24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061f0:	4ba1      	ldr	r3, [pc, #644]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80061fa:	4b9f      	ldr	r3, [pc, #636]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	0d1b      	lsrs	r3, r3, #20
 8006200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006204:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006206:	4b9c      	ldr	r3, [pc, #624]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006212:	4b99      	ldr	r3, [pc, #612]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	08db      	lsrs	r3, r3, #3
 8006218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8111 	beq.w	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b02      	cmp	r3, #2
 800623a:	f000 8083 	beq.w	8006344 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b02      	cmp	r3, #2
 8006242:	f200 80a1 	bhi.w	8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d056      	beq.n	8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006252:	e099      	b.n	8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006254:	4b88      	ldr	r3, [pc, #544]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d02d      	beq.n	80062bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006260:	4b85      	ldr	r3, [pc, #532]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	4a84      	ldr	r2, [pc, #528]	; (800647c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
 8006270:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628a:	4b7b      	ldr	r3, [pc, #492]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629a:	ed97 6a03 	vldr	s12, [r7, #12]
 800629e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062ba:	e087      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006484 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80062ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ce:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062de:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062fe:	e065      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800630e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006312:	4b59      	ldr	r3, [pc, #356]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006322:	ed97 6a03 	vldr	s12, [r7, #12]
 8006326:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800632a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006342:	e043      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800648c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006356:	4b48      	ldr	r3, [pc, #288]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006366:	ed97 6a03 	vldr	s12, [r7, #12]
 800636a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800636e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006386:	e021      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006392:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800639a:	4b37      	ldr	r3, [pc, #220]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80063cc:	4b2a      	ldr	r3, [pc, #168]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	0a5b      	lsrs	r3, r3, #9
 80063d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f2:	ee17 2a90 	vmov	r2, s15
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80063fa:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006414:	edd7 6a07 	vldr	s13, [r7, #28]
 8006418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800641c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006420:	ee17 2a90 	vmov	r2, s15
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	0e1b      	lsrs	r3, r3, #24
 800642e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800643e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006442:	edd7 6a07 	vldr	s13, [r7, #28]
 8006446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644e:	ee17 2a90 	vmov	r2, s15
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006456:	e008      	b.n	800646a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	609a      	str	r2, [r3, #8]
}
 800646a:	bf00      	nop
 800646c:	3724      	adds	r7, #36	; 0x24
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	58024400 	.word	0x58024400
 800647c:	03d09000 	.word	0x03d09000
 8006480:	46000000 	.word	0x46000000
 8006484:	4c742400 	.word	0x4c742400
 8006488:	4a742400 	.word	0x4a742400
 800648c:	4bbebc20 	.word	0x4bbebc20

08006490 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006490:	b480      	push	{r7}
 8006492:	b089      	sub	sp, #36	; 0x24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006498:	4ba0      	ldr	r3, [pc, #640]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f003 0303 	and.w	r3, r3, #3
 80064a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80064a2:	4b9e      	ldr	r3, [pc, #632]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80064ae:	4b9b      	ldr	r3, [pc, #620]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80064b8:	4b98      	ldr	r3, [pc, #608]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	08db      	lsrs	r3, r3, #3
 80064be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	fb02 f303 	mul.w	r3, r2, r3
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8111 	beq.w	80066fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	f000 8083 	beq.w	80065ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	f200 80a1 	bhi.w	800662e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d056      	beq.n	80065a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80064f8:	e099      	b.n	800662e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064fa:	4b88      	ldr	r3, [pc, #544]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d02d      	beq.n	8006562 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006506:	4b85      	ldr	r3, [pc, #532]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	08db      	lsrs	r3, r3, #3
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	4a83      	ldr	r2, [pc, #524]	; (8006720 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006512:	fa22 f303 	lsr.w	r3, r2, r3
 8006516:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006530:	4b7a      	ldr	r3, [pc, #488]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006538:	ee07 3a90 	vmov	s15, r3
 800653c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006540:	ed97 6a03 	vldr	s12, [r7, #12]
 8006544:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006560:	e087      	b.n	8006672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006728 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006574:	4b69      	ldr	r3, [pc, #420]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006584:	ed97 6a03 	vldr	s12, [r7, #12]
 8006588:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800658c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065a4:	e065      	b.n	8006672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	ee07 3a90 	vmov	s15, r3
 80065ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800672c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80065b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b8:	4b58      	ldr	r3, [pc, #352]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80065cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065e8:	e043      	b.n	8006672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80065f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fc:	4b47      	ldr	r3, [pc, #284]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006610:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006628:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800662c:	e021      	b.n	8006672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	ee07 3a90 	vmov	s15, r3
 8006634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006638:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006728 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800663c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006640:	4b36      	ldr	r3, [pc, #216]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006650:	ed97 6a03 	vldr	s12, [r7, #12]
 8006654:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006670:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006672:	4b2a      	ldr	r3, [pc, #168]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	0a5b      	lsrs	r3, r3, #9
 8006678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800668c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006698:	ee17 2a90 	vmov	r2, s15
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80066a0:	4b1e      	ldr	r3, [pc, #120]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80066be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066c6:	ee17 2a90 	vmov	r2, s15
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	0e1b      	lsrs	r3, r3, #24
 80066d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066f4:	ee17 2a90 	vmov	r2, s15
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80066fc:	e008      	b.n	8006710 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	609a      	str	r2, [r3, #8]
}
 8006710:	bf00      	nop
 8006712:	3724      	adds	r7, #36	; 0x24
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	58024400 	.word	0x58024400
 8006720:	03d09000 	.word	0x03d09000
 8006724:	46000000 	.word	0x46000000
 8006728:	4c742400 	.word	0x4c742400
 800672c:	4a742400 	.word	0x4a742400
 8006730:	4bbebc20 	.word	0x4bbebc20

08006734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006734:	b5b0      	push	{r4, r5, r7, lr}
 8006736:	b094      	sub	sp, #80	; 0x50
 8006738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const uint16_t Multiplier[6][4] = {{16384, 4096, 67, 20}, {8192, 2048, 67, 40}, {4096, 1024, 67, 80}, {2048, 512, 67, 160}, {1024, 256, 67, 320}, {512, 128, 67, 640}};
 800673a:	4bcf      	ldr	r3, [pc, #828]	; (8006a78 <main+0x344>)
 800673c:	1d3c      	adds	r4, r7, #4
 800673e:	461d      	mov	r5, r3
 8006740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006748:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800674c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	const uint16_t upV = 2000;
 8006750:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006754:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	const uint16_t dwV = 550;
 8006758:	f240 2326 	movw	r3, #550	; 0x226
 800675c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int8_t zone;

	int16_t fi_ref, fi_curr;
	int8_t n;
	uint8_t channel;
	uint8_t Scale = 3;
 8006760:	2303      	movs	r3, #3
 8006762:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8006766:	4bc5      	ldr	r3, [pc, #788]	; (8006a7c <main+0x348>)
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d11b      	bne.n	80067aa <main+0x76>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006772:	f3bf 8f4f 	dsb	sy
}
 8006776:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006778:	f3bf 8f6f 	isb	sy
}
 800677c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800677e:	4bbf      	ldr	r3, [pc, #764]	; (8006a7c <main+0x348>)
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006786:	f3bf 8f4f 	dsb	sy
}
 800678a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800678c:	f3bf 8f6f 	isb	sy
}
 8006790:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006792:	4bba      	ldr	r3, [pc, #744]	; (8006a7c <main+0x348>)
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4ab9      	ldr	r2, [pc, #740]	; (8006a7c <main+0x348>)
 8006798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800679e:	f3bf 8f4f 	dsb	sy
}
 80067a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80067a4:	f3bf 8f6f 	isb	sy
}
 80067a8:	e000      	b.n	80067ac <main+0x78>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80067aa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80067ac:	4bb3      	ldr	r3, [pc, #716]	; (8006a7c <main+0x348>)
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d138      	bne.n	800682a <main+0xf6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80067b8:	4bb0      	ldr	r3, [pc, #704]	; (8006a7c <main+0x348>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80067c0:	f3bf 8f4f 	dsb	sy
}
 80067c4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80067c6:	4bad      	ldr	r3, [pc, #692]	; (8006a7c <main+0x348>)
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	0b5b      	lsrs	r3, r3, #13
 80067d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80067d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80067ea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80067ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80067f0:	49a2      	ldr	r1, [pc, #648]	; (8006a7c <main+0x348>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80067f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fa:	1e5a      	subs	r2, r3, #1
 80067fc:	637a      	str	r2, [r7, #52]	; 0x34
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ef      	bne.n	80067e2 <main+0xae>
    } while(sets-- != 0U);
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	1e5a      	subs	r2, r3, #1
 8006806:	63ba      	str	r2, [r7, #56]	; 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <main+0xa4>
  __ASM volatile ("dsb 0xF":::"memory");
 800680c:	f3bf 8f4f 	dsb	sy
}
 8006810:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006812:	4b9a      	ldr	r3, [pc, #616]	; (8006a7c <main+0x348>)
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	4a99      	ldr	r2, [pc, #612]	; (8006a7c <main+0x348>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800681e:	f3bf 8f4f 	dsb	sy
}
 8006822:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006824:	f3bf 8f6f 	isb	sy
}
 8006828:	e000      	b.n	800682c <main+0xf8>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800682a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800682c:	f7f9 fd54 	bl	80002d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006830:	f000 fa02 	bl	8006c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006834:	f000 fbae 	bl	8006f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8006838:	f000 fb8c 	bl	8006f54 <MX_DMA_Init>
  MX_ADC1_Init();
 800683c:	f000 fa76 	bl	8006d2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8006840:	f000 faf4 	bl	8006e2c <MX_ADC2_Init>
  MX_DAC1_Init();
 8006844:	f000 fb54 	bl	8006ef0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Enable and start DAC
 8006848:	2100      	movs	r1, #0
 800684a:	488d      	ldr	r0, [pc, #564]	; (8006a80 <main+0x34c>)
 800684c:	f7fb fab7 	bl	8001dbe <HAL_DAC_Start>

  HAL_ADC_Start(&hadc2); // Enabling the second ADC
 8006850:	488c      	ldr	r0, [pc, #560]	; (8006a84 <main+0x350>)
 8006852:	f7fa f977 	bl	8000b44 <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)ADC_Data, 1); // Enabling the main ADC and start conversion
 8006856:	2201      	movs	r2, #1
 8006858:	498b      	ldr	r1, [pc, #556]	; (8006a88 <main+0x354>)
 800685a:	488c      	ldr	r0, [pc, #560]	; (8006a8c <main+0x358>)
 800685c:	f7fa fff0 	bl	8001840 <HAL_ADCEx_MultiModeStart_DMA>
  /* USER CODE END 2 */
	/* Determination the initial working zone */
	if (ADC_Data[0] > ADC_Data[1])
 8006860:	4b89      	ldr	r3, [pc, #548]	; (8006a88 <main+0x354>)
 8006862:	881a      	ldrh	r2, [r3, #0]
 8006864:	4b88      	ldr	r3, [pc, #544]	; (8006a88 <main+0x354>)
 8006866:	885b      	ldrh	r3, [r3, #2]
 8006868:	429a      	cmp	r2, r3
 800686a:	d90d      	bls.n	8006888 <main+0x154>
	{
	  if (ADC_Data[1] < dwV)
 800686c:	4b86      	ldr	r3, [pc, #536]	; (8006a88 <main+0x354>)
 800686e:	885b      	ldrh	r3, [r3, #2]
 8006870:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <main+0x14c>
		  zone = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800687e:	e010      	b.n	80068a2 <main+0x16e>
	  else
		  zone = 1;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006886:	e00c      	b.n	80068a2 <main+0x16e>
	}
	else
	{
	  if (ADC_Data[1] > upV)
 8006888:	4b7f      	ldr	r3, [pc, #508]	; (8006a88 <main+0x354>)
 800688a:	885b      	ldrh	r3, [r3, #2]
 800688c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006890:	429a      	cmp	r2, r3
 8006892:	d203      	bcs.n	800689c <main+0x168>
		  zone = 2;
 8006894:	2302      	movs	r3, #2
 8006896:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800689a:	e002      	b.n	80068a2 <main+0x16e>
	  else
		  zone = 3;
 800689c:	2303      	movs	r3, #3
 800689e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
	/* Determination the initial working zone */


	/* Sign determination of the slope angle of the characteristic   */
	if ((zone / 2) == 0)
 80068a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068a6:	3301      	adds	r3, #1
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d803      	bhi.n	80068b6 <main+0x182>
	  n = 1;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80068b4:	e002      	b.n	80068bc <main+0x188>
	else
	  n = -1;
 80068b6:	23ff      	movs	r3, #255	; 0xff
 80068b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	/* Sign determination of the slope angle of the characteristic   */

	channel = (zone % 2); // Determination of an AD8302 detector which is in the linear region
 80068bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	bfb8      	it	lt
 80068c8:	425b      	neglt	r3, r3
 80068ca:	b25b      	sxtb	r3, r3
 80068cc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	fi_ref = (zone * Multiplier[Scale][1]) + n * (ADC_Data[channel] - 1229) * Multiplier[Scale][2] / Multiplier[Scale][3]; // Initial phase shift
 80068d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80068e0:	440b      	add	r3, r1
 80068e2:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 80068e6:	fb12 f303 	smulbb	r3, r2, r3
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80068f0:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 80068f4:	4864      	ldr	r0, [pc, #400]	; (8006a88 <main+0x354>)
 80068f6:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80068fa:	f2a1 41cd 	subw	r1, r1, #1229	; 0x4cd
 80068fe:	fb01 f103 	mul.w	r1, r1, r3
 8006902:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800690c:	4403      	add	r3, r0
 800690e:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8006912:	fb03 f101 	mul.w	r1, r3, r1
 8006916:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006920:	4403      	add	r3, r0
 8006922:	f833 3c46 	ldrh.w	r3, [r3, #-70]
 8006926:	fb91 f3f3 	sdiv	r3, r1, r3
 800692a:	b29b      	uxth	r3, r3
 800692c:	4413      	add	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	while (1) // Unconditional loop
	{
	  if (DMA_flag) // Wait for the conversion flag
 8006934:	4b56      	ldr	r3, [pc, #344]	; (8006a90 <main+0x35c>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0fa      	beq.n	8006934 <main+0x200>
	  {
		  /* Check for the working zone */
		  if (ADC_Data[channel] > upV)
 800693e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006942:	4a51      	ldr	r2, [pc, #324]	; (8006a88 <main+0x354>)
 8006944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006948:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800694c:	429a      	cmp	r2, r3
 800694e:	d24b      	bcs.n	80069e8 <main+0x2b4>
		  {
			  zone = zone + n;
 8006950:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006954:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006958:	4413      	add	r3, r2
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			  if (zone == 4)
 8006960:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006964:	2b04      	cmp	r3, #4
 8006966:	d111      	bne.n	800698c <main+0x258>
			  {
				  zone = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				  fi_ref = fi_ref - Multiplier[Scale][0];
 800696e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006972:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800697c:	440b      	add	r3, r1
 800697e:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	b29b      	uxth	r3, r3
 8006986:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800698a:	e015      	b.n	80069b8 <main+0x284>
			  }
			  else if (zone == -1)
 800698c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d110      	bne.n	80069b8 <main+0x284>
			  {
				  zone = 3;
 8006996:	2303      	movs	r3, #3
 8006998:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				  fi_ref = fi_ref + Multiplier[Scale][0];
 800699c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069a6:	4413      	add	r3, r2
 80069a8:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
 80069ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80069b0:	4413      	add	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			  }
			  if ((zone / 2) == 0)
 80069b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80069bc:	3301      	adds	r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d803      	bhi.n	80069cc <main+0x298>
				  n = 1;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80069ca:	e002      	b.n	80069d2 <main+0x29e>
			  else
				  n = -1;
 80069cc:	23ff      	movs	r3, #255	; 0xff
 80069ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			  channel = (zone % 2);
 80069d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	bfb8      	it	lt
 80069de:	425b      	neglt	r3, r3
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80069e6:	e062      	b.n	8006aae <main+0x37a>
		  }
		  else if (ADC_Data[channel] < dwV)
 80069e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80069ec:	4a26      	ldr	r2, [pc, #152]	; (8006a88 <main+0x354>)
 80069ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d959      	bls.n	8006aae <main+0x37a>
		  {
			  zone = zone - n;
 80069fa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80069fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			  if (zone == 4)
 8006a0a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d111      	bne.n	8006a36 <main+0x302>
			  {
				  zone = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				  fi_ref = fi_ref - Multiplier[Scale][0];
 8006a18:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006a1c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006a26:	440b      	add	r3, r1
 8006a28:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a34:	e015      	b.n	8006a62 <main+0x32e>
			  }
			  else if (zone == -1)
 8006a36:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3e:	d110      	bne.n	8006a62 <main+0x32e>
			  {
				  zone = 3;
 8006a40:	2303      	movs	r3, #3
 8006a42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				  fi_ref = fi_ref + Multiplier[Scale][0];
 8006a46:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a50:	4413      	add	r3, r2
 8006a52:	f833 2c4c 	ldrh.w	r2, [r3, #-76]
 8006a56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a5a:	4413      	add	r3, r2
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			  }
			  if ((zone / 2) == 0)
 8006a62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006a66:	3301      	adds	r3, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d812      	bhi.n	8006a94 <main+0x360>
				  n = 1;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006a74:	e011      	b.n	8006a9a <main+0x366>
 8006a76:	bf00      	nop
 8006a78:	08007478 	.word	0x08007478
 8006a7c:	e000ed00 	.word	0xe000ed00
 8006a80:	24000050 	.word	0x24000050
 8006a84:	24000064 	.word	0x24000064
 8006a88:	24000040 	.word	0x24000040
 8006a8c:	240000c8 	.word	0x240000c8
 8006a90:	24000044 	.word	0x24000044
			  else
				  n = -1;
 8006a94:	23ff      	movs	r3, #255	; 0xff
 8006a96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			  channel = (zone % 2);
 8006a9a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	bfb8      	it	lt
 8006aa6:	425b      	neglt	r3, r3
 8006aa8:	b25b      	sxtb	r3, r3
 8006aaa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		  }
		  /* Check for the working zone */

		  fi_curr = (zone * Multiplier[Scale][1]) + n * (ADC_Data[channel] - 1229) * Multiplier[Scale][2] / Multiplier[Scale][3]; // Define the current phase shift compared to the initial time
 8006aae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006abe:	440b      	add	r3, r1
 8006ac0:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 8006ac4:	fb12 f303 	smulbb	r3, r2, r3
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8006ace:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8006ad2:	4818      	ldr	r0, [pc, #96]	; (8006b34 <main+0x400>)
 8006ad4:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8006ad8:	f2a1 41cd 	subw	r1, r1, #1229	; 0x4cd
 8006adc:	fb01 f103 	mul.w	r1, r1, r3
 8006ae0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006aea:	4403      	add	r3, r0
 8006aec:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8006af0:	fb03 f101 	mul.w	r1, r3, r1
 8006af4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006afe:	4403      	add	r3, r0
 8006b00:	f833 3c46 	ldrh.w	r3, [r3, #-70]
 8006b04:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

		  //if (Uout + (fi_curr - fi_ref) > 0) // Prevent overflow due to phase noise at the initial time (if needed)
			  //Uout = Uout + (fi_curr - fi_ref);

		  fi_ref = fi_curr; // Saving the current value
 8006b12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

		  DMA_flag = 0; // Clear the flag
 8006b1a:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <main+0x404>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]

		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)(Uout/16)); // Transfer the calculated value to the DAC output
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <main+0x408>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4804      	ldr	r0, [pc, #16]	; (8006b40 <main+0x40c>)
 8006b2e:	f7fb f998 	bl	8001e62 <HAL_DAC_SetValue>
	  if (DMA_flag) // Wait for the conversion flag
 8006b32:	e6ff      	b.n	8006934 <main+0x200>
 8006b34:	24000040 	.word	0x24000040
 8006b38:	24000044 	.word	0x24000044
 8006b3c:	24000008 	.word	0x24000008
 8006b40:	24000050 	.word	0x24000050

08006b44 <HAL_ADC_ConvCpltCallback>:
	  }
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)  //
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	4b17      	ldr	r3, [pc, #92]	; (8006bac <HAL_ADC_ConvCpltCallback+0x68>)
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	2301      	movs	r3, #1
 8006b52:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dd1d      	ble.n	8006b96 <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f003 021f 	and.w	r2, r3, #31
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b6a:	f3bf 8f4f 	dsb	sy
}
 8006b6e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006b70:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3320      	adds	r3, #32
 8006b7c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b20      	subs	r3, #32
 8006b82:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dcf2      	bgt.n	8006b70 <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 8006b8a:	f3bf 8f4f 	dsb	sy
}
 8006b8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b90:	f3bf 8f6f 	isb	sy
}
 8006b94:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8006b96:	bf00      	nop
  SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC_Data[1], 1); // DMA complete transition callback
  DMA_flag = 1;
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <HAL_ADC_ConvCpltCallback+0x70>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	24000042 	.word	0x24000042
 8006bb0:	e000ed00 	.word	0xe000ed00
 8006bb4:	24000044 	.word	0x24000044

08006bb8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) // DMA half transition callback
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dd1d      	ble.n	8006c0a <HAL_ADC_ConvHalfCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f003 021f 	and.w	r2, r3, #31
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8006bde:	f3bf 8f4f 	dsb	sy
}
 8006be2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	3320      	adds	r3, #32
 8006bf0:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3b20      	subs	r3, #32
 8006bf6:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	dcf2      	bgt.n	8006be4 <HAL_ADC_ConvHalfCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 8006bfe:	f3bf 8f4f 	dsb	sy
}
 8006c02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c04:	f3bf 8f6f 	isb	sy
}
 8006c08:	bf00      	nop
}
 8006c0a:	bf00      	nop
  SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC_Data[0], 1); // Read data from the first AD8302
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	24000040 	.word	0x24000040
 8006c1c:	e000ed00 	.word	0xe000ed00

08006c20 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback (ADC_HandleTypeDef * hadc)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	__NOP();
 8006c28:	bf00      	nop
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b09c      	sub	sp, #112	; 0x70
 8006c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c42:	224c      	movs	r2, #76	; 0x4c
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fc02 	bl	8007450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c4c:	1d3b      	adds	r3, r7, #4
 8006c4e:	2220      	movs	r2, #32
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fbfc 	bl	8007450 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006c58:	2002      	movs	r0, #2
 8006c5a:	f7fd fcdf 	bl	800461c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	603b      	str	r3, [r7, #0]
 8006c62:	4b30      	ldr	r3, [pc, #192]	; (8006d24 <SystemClock_Config+0xec>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	4a2f      	ldr	r2, [pc, #188]	; (8006d24 <SystemClock_Config+0xec>)
 8006c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c6c:	6193      	str	r3, [r2, #24]
 8006c6e:	4b2d      	ldr	r3, [pc, #180]	; (8006d24 <SystemClock_Config+0xec>)
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4b2b      	ldr	r3, [pc, #172]	; (8006d28 <SystemClock_Config+0xf0>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <SystemClock_Config+0xf0>)
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c84:	4b28      	ldr	r3, [pc, #160]	; (8006d28 <SystemClock_Config+0xf0>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	603b      	str	r3, [r7, #0]
 8006c8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006c90:	bf00      	nop
 8006c92:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <SystemClock_Config+0xec>)
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9e:	d1f8      	bne.n	8006c92 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006caa:	2302      	movs	r3, #2
 8006cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 76;
 8006cb6:	234c      	movs	r3, #76	; 0x4c
 8006cb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd fcda 	bl	8004690 <HAL_RCC_OscConfig>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006ce2:	f000 f981 	bl	8006fe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006ce6:	233f      	movs	r3, #63	; 0x3f
 8006ce8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cea:	2303      	movs	r3, #3
 8006cec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006cf6:	2340      	movs	r3, #64	; 0x40
 8006cf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006cfa:	2340      	movs	r3, #64	; 0x40
 8006cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006d08:	1d3b      	adds	r3, r7, #4
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe f8cf 	bl	8004eb0 <HAL_RCC_ClockConfig>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8006d18:	f000 f966 	bl	8006fe8 <Error_Handler>
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3770      	adds	r7, #112	; 0x70
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	58024800 	.word	0x58024800
 8006d28:	58000400 	.word	0x58000400

08006d2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006d32:	f107 031c 	add.w	r3, r7, #28
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	605a      	str	r2, [r3, #4]
 8006d3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006d3e:	463b      	mov	r3, r7
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	609a      	str	r2, [r3, #8]
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	611a      	str	r2, [r3, #16]
 8006d4c:	615a      	str	r2, [r3, #20]
 8006d4e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8006d50:	4b33      	ldr	r3, [pc, #204]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d52:	4a34      	ldr	r2, [pc, #208]	; (8006e24 <MX_ADC1_Init+0xf8>)
 8006d54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006d56:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006d5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006d5e:	4b30      	ldr	r3, [pc, #192]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d60:	2208      	movs	r2, #8
 8006d62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006d64:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006d6a:	4b2d      	ldr	r3, [pc, #180]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006d70:	4b2b      	ldr	r3, [pc, #172]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006d76:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8006d7c:	4b28      	ldr	r3, [pc, #160]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006d82:	4b27      	ldr	r3, [pc, #156]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006d88:	4b25      	ldr	r3, [pc, #148]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006d8e:	4b24      	ldr	r3, [pc, #144]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8006d94:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d96:	2203      	movs	r2, #3
 8006d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006d9a:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8006da2:	4b1f      	ldr	r3, [pc, #124]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006db0:	481b      	ldr	r0, [pc, #108]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006db2:	f7f9 fd27 	bl	8000804 <HAL_ADC_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8006dbc:	f000 f914 	bl	8006fe8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8006dc0:	2306      	movs	r3, #6
 8006dc2:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8006dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc8:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4812      	ldr	r0, [pc, #72]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006dd6:	f7fa fde3 	bl	80019a0 <HAL_ADCEx_MultiModeConfigChannel>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8006de0:	f000 f902 	bl	8006fe8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <MX_ADC1_Init+0xfc>)
 8006de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006de8:	2306      	movs	r3, #6
 8006dea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8006dec:	2307      	movs	r3, #7
 8006dee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006df0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006df4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006df6:	2304      	movs	r3, #4
 8006df8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e02:	463b      	mov	r3, r7
 8006e04:	4619      	mov	r1, r3
 8006e06:	4806      	ldr	r0, [pc, #24]	; (8006e20 <MX_ADC1_Init+0xf4>)
 8006e08:	f7f9 ff66 	bl	8000cd8 <HAL_ADC_ConfigChannel>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8006e12:	f000 f8e9 	bl	8006fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006e16:	bf00      	nop
 8006e18:	3728      	adds	r7, #40	; 0x28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	240000c8 	.word	0x240000c8
 8006e24:	40022000 	.word	0x40022000
 8006e28:	43210000 	.word	0x43210000

08006e2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006e32:	1d3b      	adds	r3, r7, #4
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	605a      	str	r2, [r3, #4]
 8006e3a:	609a      	str	r2, [r3, #8]
 8006e3c:	60da      	str	r2, [r3, #12]
 8006e3e:	611a      	str	r2, [r3, #16]
 8006e40:	615a      	str	r2, [r3, #20]
 8006e42:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8006e44:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e46:	4a28      	ldr	r2, [pc, #160]	; (8006ee8 <MX_ADC2_Init+0xbc>)
 8006e48:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006e4a:	4b26      	ldr	r3, [pc, #152]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e50:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006e52:	4b24      	ldr	r3, [pc, #144]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e54:	2208      	movs	r2, #8
 8006e56:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006e58:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e60:	2204      	movs	r2, #4
 8006e62:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006e64:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006e6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8006e70:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006e76:	4b1b      	ldr	r3, [pc, #108]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006e82:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8006e8a:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8006e90:	4b14      	ldr	r3, [pc, #80]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006e98:	4812      	ldr	r0, [pc, #72]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006e9a:	f7f9 fcb3 	bl	8000804 <HAL_ADC_Init>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 8006ea4:	f000 f8a0 	bl	8006fe8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006ea8:	4b10      	ldr	r3, [pc, #64]	; (8006eec <MX_ADC2_Init+0xc0>)
 8006eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006eac:	2306      	movs	r3, #6
 8006eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8006eb0:	2307      	movs	r3, #7
 8006eb2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006eb4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006eb8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006eba:	2304      	movs	r3, #4
 8006ebc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ec6:	1d3b      	adds	r3, r7, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4806      	ldr	r0, [pc, #24]	; (8006ee4 <MX_ADC2_Init+0xb8>)
 8006ecc:	f7f9 ff04 	bl	8000cd8 <HAL_ADC_ConfigChannel>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8006ed6:	f000 f887 	bl	8006fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006eda:	bf00      	nop
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	24000064 	.word	0x24000064
 8006ee8:	40022100 	.word	0x40022100
 8006eec:	0c900008 	.word	0x0c900008

08006ef0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006ef6:	1d3b      	adds	r3, r7, #4
 8006ef8:	2224      	movs	r2, #36	; 0x24
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 faa7 	bl	8007450 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <MX_DAC1_Init+0x5c>)
 8006f04:	4a12      	ldr	r2, [pc, #72]	; (8006f50 <MX_DAC1_Init+0x60>)
 8006f06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006f08:	4810      	ldr	r0, [pc, #64]	; (8006f4c <MX_DAC1_Init+0x5c>)
 8006f0a:	f7fa ff36 	bl	8001d7a <HAL_DAC_Init>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006f14:	f000 f868 	bl	8006fe8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006f2c:	1d3b      	adds	r3, r7, #4
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4619      	mov	r1, r3
 8006f32:	4806      	ldr	r0, [pc, #24]	; (8006f4c <MX_DAC1_Init+0x5c>)
 8006f34:	f7fa ffba 	bl	8001eac <HAL_DAC_ConfigChannel>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8006f3e:	f000 f853 	bl	8006fe8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006f42:	bf00      	nop
 8006f44:	3728      	adds	r7, #40	; 0x28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	24000050 	.word	0x24000050
 8006f50:	40007400 	.word	0x40007400

08006f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <MX_DMA_Init+0x3c>)
 8006f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f60:	4a0b      	ldr	r2, [pc, #44]	; (8006f90 <MX_DMA_Init+0x3c>)
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <MX_DMA_Init+0x3c>)
 8006f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	607b      	str	r3, [r7, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	200b      	movs	r0, #11
 8006f7e:	f7fa fec8 	bl	8001d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006f82:	200b      	movs	r0, #11
 8006f84:	f7fa fedf 	bl	8001d46 <HAL_NVIC_EnableIRQ>

}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	58024400 	.word	0x58024400

08006f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <MX_GPIO_Init+0x50>)
 8006f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fa0:	4a10      	ldr	r2, [pc, #64]	; (8006fe4 <MX_GPIO_Init+0x50>)
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006faa:	4b0e      	ldr	r3, [pc, #56]	; (8006fe4 <MX_GPIO_Init+0x50>)
 8006fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <MX_GPIO_Init+0x50>)
 8006fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <MX_GPIO_Init+0x50>)
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <MX_GPIO_Init+0x50>)
 8006fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]

}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	58024400 	.word	0x58024400

08006fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006fec:	b672      	cpsid	i
}
 8006fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ff0:	e7fe      	b.n	8006ff0 <Error_Handler+0x8>
	...

08006ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <HAL_MspInit+0x30>)
 8006ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007000:	4a08      	ldr	r2, [pc, #32]	; (8007024 <HAL_MspInit+0x30>)
 8007002:	f043 0302 	orr.w	r3, r3, #2
 8007006:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <HAL_MspInit+0x30>)
 800700c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	58024400 	.word	0x58024400

08007028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08c      	sub	sp, #48	; 0x30
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007030:	f107 031c 	add.w	r3, r7, #28
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	609a      	str	r2, [r3, #8]
 800703c:	60da      	str	r2, [r3, #12]
 800703e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a51      	ldr	r2, [pc, #324]	; (800718c <HAL_ADC_MspInit+0x164>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d163      	bne.n	8007112 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800704a:	4b51      	ldr	r3, [pc, #324]	; (8007190 <HAL_ADC_MspInit+0x168>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	4a4f      	ldr	r2, [pc, #316]	; (8007190 <HAL_ADC_MspInit+0x168>)
 8007052:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007054:	4b4e      	ldr	r3, [pc, #312]	; (8007190 <HAL_ADC_MspInit+0x168>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d10e      	bne.n	800707a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800705c:	4b4d      	ldr	r3, [pc, #308]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 800705e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007062:	4a4c      	ldr	r2, [pc, #304]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 8007064:	f043 0320 	orr.w	r3, r3, #32
 8007068:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800706c:	4b49      	ldr	r3, [pc, #292]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 800706e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800707a:	4b46      	ldr	r3, [pc, #280]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 800707c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007080:	4a44      	ldr	r2, [pc, #272]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800708a:	4b42      	ldr	r3, [pc, #264]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 800708c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007098:	2301      	movs	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800709c:	2303      	movs	r3, #3
 800709e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070a4:	f107 031c 	add.w	r3, r7, #28
 80070a8:	4619      	mov	r1, r3
 80070aa:	483b      	ldr	r0, [pc, #236]	; (8007198 <HAL_ADC_MspInit+0x170>)
 80070ac:	f7fd f906 	bl	80042bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80070b0:	4b3a      	ldr	r3, [pc, #232]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070b2:	4a3b      	ldr	r2, [pc, #236]	; (80071a0 <HAL_ADC_MspInit+0x178>)
 80070b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80070b6:	4b39      	ldr	r3, [pc, #228]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070b8:	2209      	movs	r2, #9
 80070ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070bc:	4b37      	ldr	r3, [pc, #220]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070c2:	4b36      	ldr	r3, [pc, #216]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80070c8:	4b34      	ldr	r3, [pc, #208]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80070d0:	4b32      	ldr	r3, [pc, #200]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070d8:	4b30      	ldr	r3, [pc, #192]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80070e0:	4b2e      	ldr	r3, [pc, #184]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80070e8:	4b2c      	ldr	r3, [pc, #176]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070ee:	4b2b      	ldr	r3, [pc, #172]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80070f4:	4829      	ldr	r0, [pc, #164]	; (800719c <HAL_ADC_MspInit+0x174>)
 80070f6:	f7fb f809 	bl	800210c <HAL_DMA_Init>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8007100:	f7ff ff72 	bl	8006fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a25      	ldr	r2, [pc, #148]	; (800719c <HAL_ADC_MspInit+0x174>)
 8007108:	64da      	str	r2, [r3, #76]	; 0x4c
 800710a:	4a24      	ldr	r2, [pc, #144]	; (800719c <HAL_ADC_MspInit+0x174>)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007110:	e037      	b.n	8007182 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a23      	ldr	r2, [pc, #140]	; (80071a4 <HAL_ADC_MspInit+0x17c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d132      	bne.n	8007182 <HAL_ADC_MspInit+0x15a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800711c:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <HAL_ADC_MspInit+0x168>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <HAL_ADC_MspInit+0x168>)
 8007124:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007126:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <HAL_ADC_MspInit+0x168>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d10e      	bne.n	800714c <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800712e:	4b19      	ldr	r3, [pc, #100]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 8007130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007134:	4a17      	ldr	r2, [pc, #92]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 8007136:	f043 0320 	orr.w	r3, r3, #32
 800713a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800713e:	4b15      	ldr	r3, [pc, #84]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 8007140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800714c:	4b11      	ldr	r3, [pc, #68]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 800714e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007152:	4a10      	ldr	r2, [pc, #64]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <HAL_ADC_MspInit+0x16c>)
 800715e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800716e:	2303      	movs	r3, #3
 8007170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007172:	2300      	movs	r3, #0
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007176:	f107 031c 	add.w	r3, r7, #28
 800717a:	4619      	mov	r1, r3
 800717c:	4806      	ldr	r0, [pc, #24]	; (8007198 <HAL_ADC_MspInit+0x170>)
 800717e:	f7fd f89d 	bl	80042bc <HAL_GPIO_Init>
}
 8007182:	bf00      	nop
 8007184:	3730      	adds	r7, #48	; 0x30
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40022000 	.word	0x40022000
 8007190:	24000048 	.word	0x24000048
 8007194:	58024400 	.word	0x58024400
 8007198:	58020000 	.word	0x58020000
 800719c:	2400012c 	.word	0x2400012c
 80071a0:	40020010 	.word	0x40020010
 80071a4:	40022100 	.word	0x40022100

080071a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	; 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	609a      	str	r2, [r3, #8]
 80071bc:	60da      	str	r2, [r3, #12]
 80071be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a18      	ldr	r2, [pc, #96]	; (8007228 <HAL_DAC_MspInit+0x80>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d129      	bne.n	800721e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80071ca:	4b18      	ldr	r3, [pc, #96]	; (800722c <HAL_DAC_MspInit+0x84>)
 80071cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071d0:	4a16      	ldr	r2, [pc, #88]	; (800722c <HAL_DAC_MspInit+0x84>)
 80071d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <HAL_DAC_MspInit+0x84>)
 80071dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071e8:	4b10      	ldr	r3, [pc, #64]	; (800722c <HAL_DAC_MspInit+0x84>)
 80071ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071ee:	4a0f      	ldr	r2, [pc, #60]	; (800722c <HAL_DAC_MspInit+0x84>)
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <HAL_DAC_MspInit+0x84>)
 80071fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007206:	2310      	movs	r3, #16
 8007208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800720a:	2303      	movs	r3, #3
 800720c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007212:	f107 0314 	add.w	r3, r7, #20
 8007216:	4619      	mov	r1, r3
 8007218:	4805      	ldr	r0, [pc, #20]	; (8007230 <HAL_DAC_MspInit+0x88>)
 800721a:	f7fd f84f 	bl	80042bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800721e:	bf00      	nop
 8007220:	3728      	adds	r7, #40	; 0x28
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40007400 	.word	0x40007400
 800722c:	58024400 	.word	0x58024400
 8007230:	58020000 	.word	0x58020000

08007234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007238:	e7fe      	b.n	8007238 <NMI_Handler+0x4>

0800723a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800723a:	b480      	push	{r7}
 800723c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800723e:	e7fe      	b.n	800723e <HardFault_Handler+0x4>

08007240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007244:	e7fe      	b.n	8007244 <MemManage_Handler+0x4>

08007246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007246:	b480      	push	{r7}
 8007248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800724a:	e7fe      	b.n	800724a <BusFault_Handler+0x4>

0800724c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007250:	e7fe      	b.n	8007250 <UsageFault_Handler+0x4>

08007252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007252:	b480      	push	{r7}
 8007254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800726e:	b480      	push	{r7}
 8007270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007272:	bf00      	nop
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007280:	f7f9 f89c 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007284:	bf00      	nop
 8007286:	bd80      	pop	{r7, pc}

08007288 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800728c:	4802      	ldr	r0, [pc, #8]	; (8007298 <DMA1_Stream0_IRQHandler+0x10>)
 800728e:	f7fb fd03 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007292:	bf00      	nop
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	2400012c 	.word	0x2400012c

0800729c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80072a0:	4b39      	ldr	r3, [pc, #228]	; (8007388 <SystemInit+0xec>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	4a38      	ldr	r2, [pc, #224]	; (8007388 <SystemInit+0xec>)
 80072a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80072b0:	4b36      	ldr	r3, [pc, #216]	; (800738c <SystemInit+0xf0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	2b06      	cmp	r3, #6
 80072ba:	d807      	bhi.n	80072cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80072bc:	4b33      	ldr	r3, [pc, #204]	; (800738c <SystemInit+0xf0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f023 030f 	bic.w	r3, r3, #15
 80072c4:	4a31      	ldr	r2, [pc, #196]	; (800738c <SystemInit+0xf0>)
 80072c6:	f043 0307 	orr.w	r3, r3, #7
 80072ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80072cc:	4b30      	ldr	r3, [pc, #192]	; (8007390 <SystemInit+0xf4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a2f      	ldr	r2, [pc, #188]	; (8007390 <SystemInit+0xf4>)
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80072d8:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <SystemInit+0xf4>)
 80072da:	2200      	movs	r2, #0
 80072dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80072de:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <SystemInit+0xf4>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	492b      	ldr	r1, [pc, #172]	; (8007390 <SystemInit+0xf4>)
 80072e4:	4b2b      	ldr	r3, [pc, #172]	; (8007394 <SystemInit+0xf8>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80072ea:	4b28      	ldr	r3, [pc, #160]	; (800738c <SystemInit+0xf0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80072f6:	4b25      	ldr	r3, [pc, #148]	; (800738c <SystemInit+0xf0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f023 030f 	bic.w	r3, r3, #15
 80072fe:	4a23      	ldr	r2, [pc, #140]	; (800738c <SystemInit+0xf0>)
 8007300:	f043 0307 	orr.w	r3, r3, #7
 8007304:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007306:	4b22      	ldr	r3, [pc, #136]	; (8007390 <SystemInit+0xf4>)
 8007308:	2200      	movs	r2, #0
 800730a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800730c:	4b20      	ldr	r3, [pc, #128]	; (8007390 <SystemInit+0xf4>)
 800730e:	2200      	movs	r2, #0
 8007310:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007312:	4b1f      	ldr	r3, [pc, #124]	; (8007390 <SystemInit+0xf4>)
 8007314:	2200      	movs	r2, #0
 8007316:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007318:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <SystemInit+0xf4>)
 800731a:	4a1f      	ldr	r2, [pc, #124]	; (8007398 <SystemInit+0xfc>)
 800731c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800731e:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <SystemInit+0xf4>)
 8007320:	4a1e      	ldr	r2, [pc, #120]	; (800739c <SystemInit+0x100>)
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007324:	4b1a      	ldr	r3, [pc, #104]	; (8007390 <SystemInit+0xf4>)
 8007326:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <SystemInit+0x104>)
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800732a:	4b19      	ldr	r3, [pc, #100]	; (8007390 <SystemInit+0xf4>)
 800732c:	2200      	movs	r2, #0
 800732e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007330:	4b17      	ldr	r3, [pc, #92]	; (8007390 <SystemInit+0xf4>)
 8007332:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <SystemInit+0x104>)
 8007334:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007336:	4b16      	ldr	r3, [pc, #88]	; (8007390 <SystemInit+0xf4>)
 8007338:	2200      	movs	r2, #0
 800733a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800733c:	4b14      	ldr	r3, [pc, #80]	; (8007390 <SystemInit+0xf4>)
 800733e:	4a18      	ldr	r2, [pc, #96]	; (80073a0 <SystemInit+0x104>)
 8007340:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007342:	4b13      	ldr	r3, [pc, #76]	; (8007390 <SystemInit+0xf4>)
 8007344:	2200      	movs	r2, #0
 8007346:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007348:	4b11      	ldr	r3, [pc, #68]	; (8007390 <SystemInit+0xf4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a10      	ldr	r2, [pc, #64]	; (8007390 <SystemInit+0xf4>)
 800734e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007352:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <SystemInit+0xf4>)
 8007356:	2200      	movs	r2, #0
 8007358:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800735a:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <SystemInit+0x108>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <SystemInit+0x10c>)
 8007360:	4013      	ands	r3, r2
 8007362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007366:	d202      	bcs.n	800736e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007368:	4b10      	ldr	r3, [pc, #64]	; (80073ac <SystemInit+0x110>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800736e:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <SystemInit+0x114>)
 8007370:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007374:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007376:	4b04      	ldr	r3, [pc, #16]	; (8007388 <SystemInit+0xec>)
 8007378:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800737c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800737e:	bf00      	nop
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	e000ed00 	.word	0xe000ed00
 800738c:	52002000 	.word	0x52002000
 8007390:	58024400 	.word	0x58024400
 8007394:	eaf6ed7f 	.word	0xeaf6ed7f
 8007398:	02020200 	.word	0x02020200
 800739c:	01ff0000 	.word	0x01ff0000
 80073a0:	01010280 	.word	0x01010280
 80073a4:	5c001000 	.word	0x5c001000
 80073a8:	ffff0000 	.word	0xffff0000
 80073ac:	51008108 	.word	0x51008108
 80073b0:	52004000 	.word	0x52004000

080073b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80073b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80073ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80073b8:	f7ff ff70 	bl	800729c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80073bc:	480c      	ldr	r0, [pc, #48]	; (80073f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80073be:	490d      	ldr	r1, [pc, #52]	; (80073f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80073c0:	4a0d      	ldr	r2, [pc, #52]	; (80073f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80073c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073c4:	e002      	b.n	80073cc <LoopCopyDataInit>

080073c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073ca:	3304      	adds	r3, #4

080073cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80073d0:	d3f9      	bcc.n	80073c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80073d4:	4c0a      	ldr	r4, [pc, #40]	; (8007400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80073d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073d8:	e001      	b.n	80073de <LoopFillZerobss>

080073da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073dc:	3204      	adds	r2, #4

080073de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073e0:	d3fb      	bcc.n	80073da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80073e2:	f000 f811 	bl	8007408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80073e6:	f7ff f9a5 	bl	8006734 <main>
  bx  lr
 80073ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80073ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80073f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80073f4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80073f8:	080074c8 	.word	0x080074c8
  ldr r2, =_sbss
 80073fc:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8007400:	240001a4 	.word	0x240001a4

08007404 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007404:	e7fe      	b.n	8007404 <ADC3_IRQHandler>
	...

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4d0d      	ldr	r5, [pc, #52]	; (8007440 <__libc_init_array+0x38>)
 800740c:	4c0d      	ldr	r4, [pc, #52]	; (8007444 <__libc_init_array+0x3c>)
 800740e:	1b64      	subs	r4, r4, r5
 8007410:	10a4      	asrs	r4, r4, #2
 8007412:	2600      	movs	r6, #0
 8007414:	42a6      	cmp	r6, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	4d0b      	ldr	r5, [pc, #44]	; (8007448 <__libc_init_array+0x40>)
 800741a:	4c0c      	ldr	r4, [pc, #48]	; (800744c <__libc_init_array+0x44>)
 800741c:	f000 f820 	bl	8007460 <_init>
 8007420:	1b64      	subs	r4, r4, r5
 8007422:	10a4      	asrs	r4, r4, #2
 8007424:	2600      	movs	r6, #0
 8007426:	42a6      	cmp	r6, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007430:	4798      	blx	r3
 8007432:	3601      	adds	r6, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	f855 3b04 	ldr.w	r3, [r5], #4
 800743a:	4798      	blx	r3
 800743c:	3601      	adds	r6, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	080074c0 	.word	0x080074c0
 8007444:	080074c0 	.word	0x080074c0
 8007448:	080074c0 	.word	0x080074c0
 800744c:	080074c4 	.word	0x080074c4

08007450 <memset>:
 8007450:	4402      	add	r2, r0
 8007452:	4603      	mov	r3, r0
 8007454:	4293      	cmp	r3, r2
 8007456:	d100      	bne.n	800745a <memset+0xa>
 8007458:	4770      	bx	lr
 800745a:	f803 1b01 	strb.w	r1, [r3], #1
 800745e:	e7f9      	b.n	8007454 <memset+0x4>

08007460 <_init>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr

0800746c <_fini>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr
